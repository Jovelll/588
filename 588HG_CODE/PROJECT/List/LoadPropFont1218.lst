C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LOADPROPFONT1218
OBJECT MODULE PLACED IN .\Obj\LoadPropFont1218.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\KERNEL\SCALER\LoadPropFont1218.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\K
                    -ERNEL\SYSTEM\INC;..\KERNEL\SCALER\INC;..\DRIVER\extDEVICE\INC;..\LIB\INC;..\PANEL\INC;..\UI\BOARD;..\UI\INC;..\UI\MODEL;
                    -..\DRIVER\INC;..\Customer) DEFINE(ModelName=TSUMXX9_DEMO) DEBUG OBJECTEXTEND PRINT(.\List\LoadPropFont1218.lst) TABS(2) 
                    -OBJECT(.\Obj\LoadPropFont1218.obj)

line level    source

   1          ///////////////////////////////////////////////////////////////////////////////
   2          /// @file LoadPropFont1218.c
   3          /// @brief
   4          /// @author MStarSemi Inc.
   5          ///
   6          /// The Prop. font generating and loading function.
   7          ///
   8          /// Features
   9          ///  -Left/Center/Right Align
  10          ///  -Prop Font shift up/down
  11          ///  -Load 12x18 font format to 12x18 font RAM
  12          ///
  13          ///////////////////////////////////////////////////////////////////////////////
  14          
  15          
  16          #define _LOADPROPFONT1218_C
  17          
  18          #include <stddef.h>
  19          #include "LoadPropFont1218.h"
  20          #include "Ms_rwReg.h"
  21          #include "board.h"
  22          #include "Ms_Reg.h"
  23          #include "global.h"
  24          //#include "DebugMsg.h"
  25          
  26          #if PropFontUseCommonArea
  27          extern PropFontNonCompressType code tPropFontSet[];
  28          extern PropFontNonCompressType code tPropFontSet1[];
  29          extern PropFontNonCompressType code tPropFontSet2[];
  30          #endif
  31          //#define OSD2_A3 0xA3
  32          //#define OSD2_A4 0xA4
  33          
  34          xdata PropFontNonCompressType *pstPropFontSet1218;
  35          ///BIT 0~1 : pixel between font
  36          ///BIT 2~3 : align(00=left align, 01=right align, 11= center align)
  37          BYTE xdata g_u8PropFontFlags=SPACE2PIXEL|LEFT_ALIGN;
  38          BYTE xdata g_u8AlignResetIndex=0xFF;  ///start number of strings for reset align flag to left align
  39          BYTE xdata g_u8ByPassLength=0;
  40          /// Shift "a font" up or down inner 12x18 dimension.
  41          static void ShiftFontUpDown(WORD *pu16SN, BYTE u8Shift)
  42          {
  43   1          BYTE  i;
  44   1          BYTE  u8ShiftUp;
  45   1      
  46   1          if(u8Shift&0x80)
  47   1          {   u8ShiftUp=1;
  48   2              u8Shift&=0x7F;
  49   2          }
  50   1          else
  51   1              u8ShiftUp=0;
  52   1      
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 2   

  53   1          if(u8ShiftUp)
  54   1          {
  55   2              for(i=u8Shift;i<FONT_HEIGHT;i++)
  56   2                  *(pu16SN+i-u8Shift) = (*(pu16SN+i));
  57   2              for(i=(FONT_HEIGHT-u8Shift);i<FONT_HEIGHT;i++)
  58   2                  *(pu16SN+i) = 0;
  59   2          }
  60   1          else//ShiftDown
  61   1          {
  62   2              for(i=(FONT_HEIGHT-u8Shift);i>0;i--)
  63   2                  *(pu16SN+i-1+u8Shift) = (*(pu16SN+i-1));
  64   2              for(i=0;i<u8Shift;i++)
  65   2                  *(pu16SN+i) = 0;
  66   2          }
  67   1      }
  68          
  69          #if 0
              /// Write 2 words of font data(2 line with 12 pixel width) to font RAM. ex: 0Aaa,0Bbb ===> BA,AA,BB
              /// This function should be modified if use 16x16
              static void WriteWord2Font(WORD u16SN1,WORD u16SN2)
              {
                  msWriteByte(OSD2_A4, HIBYTE(u16SN1) + (HIBYTE(u16SN2) <<4));
                  msWriteByte(OSD2_A4, LOBYTE(u16SN1));
                  msWriteByte(OSD2_A4, LOBYTE(u16SN2));
              }
              /// Load a font char(12x18) to font RAM.
              /// This function should be modified if use 16x16!
              void OSDLoadOneFont(WORD* pu16SN)
              {   BYTE  i;
                  for(i=0; i < (FONT_HEIGHT>>1); i++)
                      WriteWord2Font(*(pu16SN+(i<<1)),*(pu16SN+(i<<1)+1));
              }
              #else
  86          /// Load a font char(12x18) to font RAM.
  87          /// This function should be modified if use 16x16!
  88          void OSDLoadOneFont(WORD* pu16SN)
  89          {   BYTE  i;
  90   1          #define u16SN1  (*(pu16SN+i))
  91   1          #define u16SN2  (*(pu16SN+i+1))
  92   1      
  93   1          for(i=0; i < FONT_HEIGHT; i+=2)
  94   1          {
  95   2          #if CHIP_ID>=CHIP_TSUMV
  96   2              //xxxx0000 00001111
  97   2              //xxxx1111 22222222
  98   2              MEM_MSWRITE_BYTE(PORT_FONT_DATA, (BYTE)(u16SN1>>4) );
  99   2              MEM_MSWRITE_BYTE(PORT_FONT_DATA, (LOBYTE(u16SN1)<<4)+HIBYTE(u16SN2));
 100   2              MEM_MSWRITE_BYTE(PORT_FONT_DATA, LOBYTE(u16SN2));
 101   2          #else
                      MEM_MSWRITE_BYTE(OSD2_A4, HIBYTE(u16SN1) + (HIBYTE(u16SN2) <<4));
                      MEM_MSWRITE_BYTE(OSD2_A4, LOBYTE(u16SN1));
                      MEM_MSWRITE_BYTE(OSD2_A4, LOBYTE(u16SN2));
                  #endif
 106   2          }
 107   1          #undef u16SN1
 108   1          #undef u16SN2
 109   1      }
 110          #endif
 111          
 112          /// Clear a font char(12x18) buffer.
 113          void ClearFontBuf(WORD* pu16SN)
 114          {   BYTE  i;
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 3   

 115   1      
 116   1      #if 0
                  for(i=0; i < FONT_HEIGHT; i++)
                      *(pu16SN + i) = 0;
              #else
 120   1          //Jison: Speed up
 121   1          for(i=0; i < (FONT_HEIGHT>>1); i++)
 122   1              *((DWORD*)pu16SN + i) = 0;
 123   1      #endif
 124   1      
 125   1      }
 126          /// Do OR operation between two font buffer, save the sesult to 1st buffer.
 127          static void MergeFontBuf(WORD* pu16SN ,WORD* pu16SN1)
 128          {   BYTE  i;
 129   1          for(i=0; i < FONT_HEIGHT; i++)
 130   1              *(pu16SN + i) = (*(pu16SN + i))| (*(pu16SN1 + i));
 131   1      }
 132          //BitTarLStart 0xFFF = 1111 1111 1111 sequence >>  0123 4567 89AB
 133          /// Copy sub-part of src font (start from u8BitSrcLStart with u8BitWidth) to tar font area.
 134          /// This function should be modified if use 16x16!
 135          ///u8BitSrcLStart is the 1st pixel position of Src font that will be merged to Tar.
 136          ///u8BitWidth is the pixel width following 1st pixel position that will be merged to.
 137          static void CopySubFontBuf(WORD* pu16Tar,WORD*pu16Src,BYTE u8BitSrcLStart, BYTE u8BitWidth)
 138          {   BYTE  i;
 139   1          WORD  u16Temp;
 140   1      #if 0
                  for(i=0; i < FONT_HEIGHT; i++)
                  {
                      u16Temp = (*(pu16Src + i));
                      u16Temp = u16Temp<<u8BitSrcLStart;
                      u16Temp &= 0xFFF;
                      u16Temp = u16Temp>>(FONT_WIDTH-u8BitWidth);
                      *(pu16Tar + i) = *(pu16Tar + i) | u16Temp;
                  }
              #else //Jison, Speed up
 150   1          u8BitWidth=(FONT_WIDTH-u8BitWidth);
 151   1          for(i=0; i < FONT_HEIGHT; i++)
 152   1          {
 153   2              u16Temp = ((((*(pu16Src + i))<<u8BitSrcLStart)&0xFFF)>>(u8BitWidth));
 154   2              *(pu16Tar + i) |= u16Temp;
 155   2          }
 156   1      #endif
 157   1      }
 158          
 159          static BYTE GetRemainderPixelOfString(BYTE *pu8String, BYTE u8ExtFontIndex)
 160          {
 161   1          WORD u16PixelLen=0;
 162   1          BYTE u8SpaceWidth;
 163   1      
 164   1          while(*pu8String)
 165   1          {
 166   2              u8SpaceWidth = pstPropFontSet1218[*pu8String+(u8ExtFontIndex<<8)].u8SpaceWidth;
 167   2      //        u16PixelLen+=(SP_BETWEEN_FONT+FONT_WIDTH-( (pstFontData->u8SpaceWidth & 0x0F) + ((pstFontData->u
             -8SpaceWidth & 0xF0)>>4) ));
 168   2              if ((u8SpaceWidth & 0xF0)==0xF0)
 169   2                  u16PixelLen+= (FONT_WIDTH-(u8SpaceWidth & 0x0F));
 170   2              else
 171   2                  u16PixelLen+=(( (u8SpaceWidth & 0x0F) + ((u8SpaceWidth & 0xF0)>>4) )-SP_BETWEEN_FONT);
 172   2              pu8String++;
 173   2          }
 174   1          u16PixelLen%=FONT_WIDTH;
 175   1      #if 0
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 4   

                  u16PixelLen=FONT_WIDTH-u16PixelLen;
                  return (BYTE)(u16PixelLen ? FONT_WIDTH-u16PixelLen : 0);
              #else //Jison 080109
 179   1          return ((BYTE)u16PixelLen);
 180   1      #endif
 181   1      }
 182          /// pu8Strings and pu8Strings1 are the null-terminal strings set of font indexes to PropFontNonCompressTyp
             -e array.
 183          /// u16FontCount and u16FontCount1 are array size of pu8Strings and pu8Strings1 respectively.
 184          /// u8UDShift and u8UDShift1 are the shift pixels pu8Strings and pu8Strings1, Bit 7==1 means shift up.
 185          /// >>>Shift up/down and load single line string to font RAM if pu8Strings1==0 and u16FontCount1==0.
 186          /// >>>Merge two font string lines to a single 18 pixels height charactor line and load to font RAM.
 187          BYTE LoadPropFonts1218(BYTE u8Addr, BYTE *pu8Strings, WORD u16FontCount,
 188              BYTE *pu8Strings1, WORD u16FontCount1, BYTE u8UDShift ,BYTE u8UDShift1)
 189          {
 190   1          PropFontNonCompressType *pstFontData = NULL;
 191   1          PropFontNonCompressType *pstFontData1 = NULL;
 192   1          WORD  xdata u16StrIndex=0, u16StrIndex1=0;  ///The str index in pu8Strings
 193   1          BYTE  xdata u8Flags=0;
 194   1          BYTE  xdata u8BufW=0,u8BufW1=0;
 195   1          BYTE  xdata u8NextFontW=0,u8NextFontW1=0;
 196   1          BYTE  xdata u8NextBit=0,u8NextBit1=0;
 197   1          BYTE  xdata u8ExtFontIndex = 0, u8ExtFontIndex1 = 0;
 198   1          WORD  xdata tSN[FONT_HEIGHT]; //May cause problem if use idata. Why???
 199   1          WORD  xdata tSN1[FONT_HEIGHT];
 200   1          BYTE  xdata u8StrCount=0;
 201   1          BYTE  xdata u8FontCnt=0;
 202   1      
 203   1      #define LOAD_SINGLE_LINE_BIT            BIT7
 204   1      #define LOAD_SINGLE_LINE_FLAG           (u8Flags&LOAD_SINGLE_LINE_BIT)
 205   1      #define SET_LOAD_SINGLE()               (u8Flags|=LOAD_SINGLE_LINE_BIT)
 206   1      
 207   1      #define STR_1ST_CHAR_BIT                BIT0
 208   1      #define STR_1ST_CHAR_FLAG               (u8Flags&STR_1ST_CHAR_BIT)
 209   1      #define SET_STR_1ST_CHAR_FLAG()         (u8Flags|=STR_1ST_CHAR_BIT)
 210   1      #define CLR_STR_1ST_CHAR_FLAG()         (u8Flags&=~STR_1ST_CHAR_BIT)
 211   1      
 212   1      #define STR1_1ST_CHAR_BIT               BIT1
 213   1      #define STR1_1ST_CHAR_FLAG              (u8Flags&STR1_1ST_CHAR_BIT)
 214   1      #define SET_STR1_1ST_CHAR_FLAG()        (u8Flags|=STR1_1ST_CHAR_BIT)
 215   1      #define CLR_STR1_1ST_CHAR_FLAG()        (u8Flags&=~STR1_1ST_CHAR_BIT)
 216   1      
 217   1      #define LOAD_SINGLE_FONT_BIT            BIT2
 218   1      #define LOAD_SINGLE_FONT_FLAG           (u8Flags&LOAD_SINGLE_FONT_BIT)
 219   1      #define SET_LOAD_SINGLE_FONT_FLAG()     (u8Flags|=LOAD_SINGLE_FONT_BIT)
 220   1      #define CLR_LOAD_SINGLE_FONT_FLAG()     (u8Flags&=~LOAD_SINGLE_FONT_BIT)
 221   1      
 222   1      #define LOAD_SINGLE_FONT1_BIT           BIT3
 223   1      #define LOAD_SINGLE_FONT1_FLAG          (u8Flags&LOAD_SINGLE_FONT1_BIT)
 224   1      #define SET_LOAD_SINGLE_FONT1_FLAG()    (u8Flags|=LOAD_SINGLE_FONT1_BIT)
 225   1      #define CLR_LOAD_SINGLE_FONT1_FLAG()    (u8Flags&=~LOAD_SINGLE_FONT1_BIT)
 226   1      
 227   1      
 228   1          if(pu8Strings1==NULL || u16FontCount1==0)
 229   1              SET_LOAD_SINGLE();
 230   1          #if CHIP_ID>=CHIP_TSUMV
 231   1          {   extern BYTE xdata g_u8FontAddrHiBits;
 232   2              u16StrIndex=((msRead2Byte(OSD1_08)+((((WORD)g_u8FontAddrHiBits)<<8)+(u8Addr))*(((msReadByte(OSD1_0
             -B)>>4)&0x03)+1))<<2); //get real address in cafram, ((font base entry)+unit*(unit size))*4 addr/entry
 233   2              //u16StrIndex=GET_FONT_RAM_ADDR(u8Addr); //get real address in cafram, ((font base entry)+unit*(un
             -it size))*4 addr/entry
 234   2          }
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 5   

 235   1          WRITE_CAFSRAM_ADDR();
 236   1          msWrite2Byte(PORT_FONT_ADDR, u16StrIndex);
 237   1          u16StrIndex=0;
 238   1          WRITE_FONT();
 239   1          #else
                  MEM_MSWRITE_BYTE(OSD2_A3, u8Addr);
                  #endif
 242   1          SET_STR_1ST_CHAR_FLAG();
 243   1          SET_STR1_1ST_CHAR_FLAG();
 244   1          while((u16StrIndex < u16FontCount) || (u16StrIndex1 < u16FontCount1))
 245   1          {
 246   2              if((!LOAD_SINGLE_FONT_FLAG) && (u16StrIndex < u16FontCount))   /// Handle 1st strings
 247   2              {
 248   3                  if(STR_1ST_CHAR_FLAG)
 249   3                  {
 250   4                      ClearFontBuf(tSN);
 251   4                      CLR_STR_1ST_CHAR_FLAG();
 252   4      
 253   4                      if( (*(pu8Strings + u16StrIndex)) == 0xFF )
 254   4                      {
 255   5                          u16StrIndex++;
 256   5                          u8ExtFontIndex = *(pu8Strings + u16StrIndex);
 257   5                          u16StrIndex++;
 258   5                      }
 259   4                  #if PropFontUseCommonArea
 260   4                      {
 261   5                          if (*(pu8Strings+u16StrIndex)>=SecondTblAddr)
 262   5                          {
 263   6                              if ( LanguageIndex == 1 )
 264   6                              {
 265   7                                  pstPropFontSet1218=tPropFontSet1;
 266   7                                  pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)-SecondTblAddr;
 267   7                              }
 268   6                              else if ( LanguageIndex == 2 )
 269   6                              {
 270   7                                  pstPropFontSet1218=tPropFontSet2;
 271   7                                  pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)-SecondTblAddr;
 272   7                              }
 273   6                          }
 274   5                          else
 275   5                          {
 276   6                              pstPropFontSet1218=tPropFontSet;
 277   6                              pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)+(u8ExtFontIndex<<8);
 278   6                          }
 279   5                      }
 280   4                      #else
                              pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)+(u8ExtFontIndex<<8);
                              #endif
 283   4                      u8NextFontW = (FONT_WIDTH -( (pstFontData->u8SpaceWidth & 0x0F) + ((pstFontData->u8SpaceWi
             -dth & 0xF0)>>4) ));
 284   4                      if (IS_LEFT_ALIGN)
 285   4                          u8BufW=FONT_WIDTH-SP_BETWEEN_FONT;  //Leading with SP_BETWEEN_FONT pixels
 286   4                      else if (IS_RIGHT_ALIGN)
 287   4                          u8BufW=FONT_WIDTH-/*SP_BETWEEN_FONT-*/GetRemainderPixelOfString(pu8Strings+u16StrIndex
             -, u8ExtFontIndex);
 288   4                      else    //IS_CENTER_ALIGN
 289   4                          u8BufW=FONT_WIDTH-/*SP_BETWEEN_FONT-*/(GetRemainderPixelOfString(pu8Strings+u16StrInde
             -x, u8ExtFontIndex)>>1);
 290   4                      //u8BufW : the remainder pixel width
 291   4                                  /// Retrieve the first font of string and copy to a blank buffer.
 292   4                      CopySubFontBuf(tSN, pstFontData->tLineData, (pstFontData->u8SpaceWidth & 0xF0)>>4, u8BufW)
             -;
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 6   

 293   4                  }
 294   3                  else
 295   3                  {
 296   4                      if ((pstFontData->u8SpaceWidth & 0xF0)==0xF0)
 297   4                      {
 298   5                          CopySubFontBuf(tSN, pstFontData->tLineData, u8NextBit, u8BufW);
 299   5                      }
 300   4                      else
 301   4                          CopySubFontBuf(tSN, pstFontData->tLineData, u8NextBit+((pstFontData->u8SpaceWidth & 0x
             -F0)>>4), u8BufW);
 302   4                  }
 303   3                  ///Reset position variable
 304   3                  if(u8BufW>=u8NextFontW)
 305   3                  {
 306   4                      u8BufW -= u8NextFontW;
 307   4                      u8NextFontW=0;
 308   4                      u8NextBit=0;
 309   4                  }
 310   3                  else
 311   3                  {
 312   4                      u8NextFontW-=u8BufW;
 313   4                      u8NextBit+=u8BufW;
 314   4                      u8BufW=0;
 315   4                  }
 316   3      
 317   3                  if(u8BufW==0)   ///Buffur full
 318   3                  {
 319   4                      u8BufW=FONT_WIDTH;
 320   4                      SET_LOAD_SINGLE_FONT_FLAG();
 321   4                  }
 322   3      
 323   3                  if(u8NextFontW==0) ///finished a font
 324   3                  {
 325   4                      #if PropFontUseCommonArea
 326   4                      {
 327   5                          if (*(pu8Strings+u16StrIndex)>=SecondTblAddr)
 328   5                          {
 329   6                              if ( LanguageIndex == 1 )
 330   6                              {
 331   7                                  pstPropFontSet1218=tPropFontSet1;
 332   7                              }
 333   6                              else if ( LanguageIndex == 2 )
 334   6                              {
 335   7                                  pstPropFontSet1218=tPropFontSet2;
 336   7                              }
 337   6      
 338   6                              if (((pstPropFontSet1218+*(pu8Strings+u16StrIndex+1)-SecondTblAddr)->u8SpaceWidth 
             -& 0xF0)!=0xF0)
 339   6                              {
 340   7                                  if(u8BufW>SP_BETWEEN_FONT)
 341   7                                      u8BufW-=SP_BETWEEN_FONT;
 342   7                                  else if(u8BufW==SP_BETWEEN_FONT)
 343   7                                  {
 344   8                                      u8BufW=FONT_WIDTH;
 345   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 346   8                                  }
 347   7                                  else// if(u8BufW!=0)  u8BufW<SP_BETWEEN_FONT
 348   7                                  {
 349   8                                      //u8BufW=FONT_WIDTH-u8BufW;
 350   8                                      u8BufW=FONT_WIDTH-(SP_BETWEEN_FONT-u8BufW);
 351   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 352   8                                  }
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 7   

 353   7                              }
 354   6      
 355   6                          }
 356   5                          else
 357   5                          {
 358   6                              pstPropFontSet1218=tPropFontSet;
 359   6                              if (((pstPropFontSet1218+*(pu8Strings+u16StrIndex+1)+(u8ExtFontIndex<<8))->u8Space
             -Width & 0xF0)!=0xF0)
 360   6                              {
 361   7                                  if(u8BufW>SP_BETWEEN_FONT)
 362   7                                      u8BufW-=SP_BETWEEN_FONT;
 363   7                                  else if(u8BufW==SP_BETWEEN_FONT)
 364   7                                  {
 365   8                                      u8BufW=FONT_WIDTH;
 366   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 367   8                                  }
 368   7                                  else// if(u8BufW!=0)  u8BufW<SP_BETWEEN_FONT
 369   7                                  {
 370   8                                      //u8BufW=FONT_WIDTH-u8BufW;
 371   8                                      u8BufW=FONT_WIDTH-(SP_BETWEEN_FONT-u8BufW);
 372   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 373   8                                  }
 374   7                              }
 375   6      
 376   6                          }
 377   5                      }
 378   4                      #else
                              if (((pstPropFontSet1218+*(pu8Strings+u16StrIndex+1)+(u8ExtFontIndex<<8))->u8SpaceWidth & 
             -0xF0)!=0xF0)
                              {
                                  if(u8BufW>SP_BETWEEN_FONT)
                                      u8BufW-=SP_BETWEEN_FONT;
                                  else if(u8BufW==SP_BETWEEN_FONT)
                                  {
                                      u8BufW=FONT_WIDTH;
                                      SET_LOAD_SINGLE_FONT_FLAG();
                                  }
                                  else// if(u8BufW!=0)  u8BufW<SP_BETWEEN_FONT
                                  {
                                      //u8BufW=FONT_WIDTH-u8BufW;
                                      u8BufW=FONT_WIDTH-(SP_BETWEEN_FONT-u8BufW);
                                      SET_LOAD_SINGLE_FONT_FLAG();
                                  }
                              }
                              #endif
 396   4                      u16StrIndex++;
 397   4      
 398   4                      if( (*(pu8Strings + u16StrIndex)) == 0xFF )
 399   4                      {
 400   5                          u16StrIndex++;
 401   5                          u8ExtFontIndex = *(pu8Strings + u16StrIndex);
 402   5                          u16StrIndex++;
 403   5                      }
 404   4                  #if PropFontUseCommonArea
 405   4                      {
 406   5                          if (*(pu8Strings+u16StrIndex)>=SecondTblAddr)
 407   5                          {
 408   6                              if ( LanguageIndex == 1 )
 409   6                              {
 410   7                                  pstPropFontSet1218=tPropFontSet1;
 411   7                                  pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)-SecondTblAddr;
 412   7                              }
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 8   

 413   6                              else if ( LanguageIndex == 2 )
 414   6                              {
 415   7                                  pstPropFontSet1218=tPropFontSet2;
 416   7                                  pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)-SecondTblAddr;
 417   7                              }
 418   6                          }
 419   5                          else
 420   5                          {
 421   6                              pstPropFontSet1218=tPropFontSet;
 422   6                              pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)+(u8ExtFontIndex<<8);
 423   6                          }
 424   5                      }
 425   4                      #else
                              pstFontData = pstPropFontSet1218+*(pu8Strings+u16StrIndex)+(u8ExtFontIndex<<8);///get next
             - font data
                              #endif
 428   4                      if ((pstFontData->u8SpaceWidth & 0xF0)==0xF0)
 429   4                          u8NextFontW = (pstFontData->u8SpaceWidth & 0x0F);
 430   4                      else
 431   4                          u8NextFontW = (FONT_WIDTH -( (pstFontData->u8SpaceWidth & 0x0F) + ((pstFontData->u8Spa
             -ceWidth & 0xF0)>>4) ));
 432   4      
 433   4                      u8NextBit=0;
 434   4                      if(*(pu8Strings+u16StrIndex) == 0x00)
 435   4                      {
 436   5                          if(u8BufW<(FONT_WIDTH-SP_BETWEEN_FONT))///???
 437   5                          {
 438   6                              SET_LOAD_SINGLE_FONT_FLAG();
 439   6                          }
 440   5                          SET_STR_1ST_CHAR_FLAG();
 441   5                          u16StrIndex++;
 442   5                          if ((++u8StrCount)==g_u8AlignResetIndex)
 443   5                              g_u8PropFontFlags&=~0x0C;
 444   5                      }
 445   4                  }
 446   3              }
 447   2              else if(u16StrIndex >= u16FontCount)
 448   2              {
 449   3                  if(u8BufW)
 450   3                      u8BufW = 0;
 451   3                  SET_LOAD_SINGLE_FONT_FLAG();
 452   3              }
 453   2      
 454   2      
 455   2              //===================================================================================
 456   2              if((!LOAD_SINGLE_FONT1_FLAG) && (u16StrIndex1 < u16FontCount1))   /// Handle 2nd strings
 457   2              {
 458   3                  if(STR1_1ST_CHAR_FLAG)
 459   3                  {
 460   4                      ClearFontBuf(tSN1);
 461   4                      CLR_STR1_1ST_CHAR_FLAG();
 462   4      
 463   4                      if( (*(pu8Strings1 + u16StrIndex1)) == 0xFF )
 464   4                      {
 465   5                          u16StrIndex1++;
 466   5                          u8ExtFontIndex1 = *(pu8Strings1 + u16StrIndex1);
 467   5                          u16StrIndex1++;
 468   5                      }
 469   4                  #if PropFontUseCommonArea
 470   4                      {
 471   5                          if (*(pu8Strings1+u16StrIndex1)>=SecondTblAddr)
 472   5                          {
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 9   

 473   6                              if ( LanguageIndex == 1 )
 474   6                              {
 475   7                                  pstPropFontSet1218=tPropFontSet1;
 476   7                                  pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)-SecondTblAddr;
 477   7                              }
 478   6                              else if ( LanguageIndex == 2 )
 479   6                              {
 480   7                                  pstPropFontSet1218=tPropFontSet2;
 481   7                                  pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)-SecondTblAddr;
 482   7                              }
 483   6                          }
 484   5                          else
 485   5                          {
 486   6                              pstPropFontSet1218=tPropFontSet;
 487   6                              pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)+(u8ExtFontIndex1<<8)
             -;
 488   6                          }
 489   5                      }
 490   4                      #else
                              pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)+(u8ExtFontIndex1<<8);
                              #endif
 493   4                      u8NextFontW1 = (FONT_WIDTH -( (pstFontData1->u8SpaceWidth & 0x0F) + ((pstFontData1->u8Spac
             -eWidth & 0xF0)>>4) ));
 494   4                      if (IS_LEFT_ALIGN)
 495   4                          u8BufW1=FONT_WIDTH-SP_BETWEEN_FONT;
 496   4                      else if (IS_RIGHT_ALIGN)
 497   4                          u8BufW=FONT_WIDTH-/*SP_BETWEEN_FONT-*/GetRemainderPixelOfString(pu8Strings1+u16StrInde
             -x1, u8ExtFontIndex1);
 498   4                      else    //IS_CENTER_ALIGN
 499   4                          u8BufW=FONT_WIDTH-/*SP_BETWEEN_FONT-*/(GetRemainderPixelOfString(pu8Strings1+u16StrInd
             -ex1, u8ExtFontIndex1)>>1);
 500   4      
 501   4                      CopySubFontBuf(tSN1, pstFontData1->tLineData, (pstFontData1->u8SpaceWidth & 0xF0)>>4, u8Bu
             -fW1);
 502   4                  }
 503   3                  else
 504   3                  {
 505   4                      if ((pstFontData1->u8SpaceWidth & 0xF0)==0xF0)
 506   4                      {
 507   5                          CopySubFontBuf(tSN1, pstFontData1->tLineData, u8NextBit1, u8BufW1);
 508   5                      }
 509   4                      else
 510   4                          CopySubFontBuf(tSN1, pstFontData1->tLineData, u8NextBit1+((pstFontData1->u8SpaceWidth 
             -& 0xF0)>>4), u8BufW1);
 511   4                  }
 512   3      
 513   3                  if(u8BufW1>=u8NextFontW1)
 514   3                  {
 515   4                      u8BufW1 -= u8NextFontW1;
 516   4                      u8NextFontW1=0;
 517   4                      u8NextBit1=0;
 518   4                  }
 519   3                  else
 520   3                  {
 521   4                      u8NextFontW1-=u8BufW1;
 522   4                      u8NextBit1+=u8BufW1;
 523   4                      u8BufW1=0;
 524   4                  }
 525   3      
 526   3                  if(u8BufW1==0)
 527   3                  {
 528   4                      u8BufW1=FONT_WIDTH;
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 10  

 529   4                      SET_LOAD_SINGLE_FONT1_FLAG();
 530   4                  }
 531   3                  if(u8NextFontW1==0)
 532   3                  {
 533   4                      #if PropFontUseCommonArea
 534   4                      {
 535   5                          if (*(pu8Strings1+u16StrIndex1)>=SecondTblAddr)
 536   5                          {
 537   6                              if ( LanguageIndex == 1 )
 538   6                              {
 539   7                                  pstPropFontSet1218=tPropFontSet1;
 540   7                              }
 541   6                              else if ( LanguageIndex == 2 )
 542   6                              {
 543   7                                  pstPropFontSet1218=tPropFontSet2;
 544   7                              }
 545   6      
 546   6                              if (((pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)-SecondTblAddr)->u8SpaceWidth 
             -& 0xF0)!=0xF0)
 547   6                              {
 548   7                                  if(u8BufW>SP_BETWEEN_FONT)
 549   7                                      u8BufW-=SP_BETWEEN_FONT;
 550   7                                  else if(u8BufW==SP_BETWEEN_FONT)
 551   7                                  {
 552   8                                      u8BufW=FONT_WIDTH;
 553   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 554   8                                  }
 555   7                                  else// if(u8BufW!=0)  u8BufW<SP_BETWEEN_FONT
 556   7                                  {
 557   8                                      //u8BufW=FONT_WIDTH-u8BufW;
 558   8                                      u8BufW=FONT_WIDTH-(SP_BETWEEN_FONT-u8BufW);
 559   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 560   8                                  }
 561   7                              }
 562   6      
 563   6                          }
 564   5                          else
 565   5                          {
 566   6                              pstPropFontSet1218=tPropFontSet;
 567   6                              if (((pstPropFontSet1218+*(pu8Strings1+u16StrIndex1+1)+(u8ExtFontIndex<<8))->u8Spa
             -ceWidth & 0xF0)!=0xF0)
 568   6                              {
 569   7                                  if(u8BufW>SP_BETWEEN_FONT)
 570   7                                      u8BufW-=SP_BETWEEN_FONT;
 571   7                                  else if(u8BufW==SP_BETWEEN_FONT)
 572   7                                  {
 573   8                                      u8BufW=FONT_WIDTH;
 574   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 575   8                                  }
 576   7                                  else// if(u8BufW!=0)  u8BufW<SP_BETWEEN_FONT
 577   7                                  {
 578   8                                      //u8BufW=FONT_WIDTH-u8BufW;
 579   8                                      u8BufW=FONT_WIDTH-(SP_BETWEEN_FONT-u8BufW);
 580   8                                      SET_LOAD_SINGLE_FONT_FLAG();
 581   8                                  }
 582   7                              }
 583   6      
 584   6                          }
 585   5                      }
 586   4                      #else
                              if (((pstPropFontSet1218+*(pu8Strings1+u16StrIndex1+1)+(u8ExtFontIndex1<<8))->u8SpaceWidth
             - & 0xF0)!=0xF0)
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 11  

                              {
              
                                  if(u8BufW1>SP_BETWEEN_FONT)
                                      u8BufW1-=SP_BETWEEN_FONT;
                                  else if(u8BufW1==SP_BETWEEN_FONT)
                                  {
                                      u8BufW1=FONT_WIDTH;
                                      SET_LOAD_SINGLE_FONT1_FLAG();
                                  }
                                  else
                                  {
                                      //u8BufW1=FONT_WIDTH-u8BufW1;
                                      u8BufW1=FONT_WIDTH-(SP_BETWEEN_FONT-u8BufW1);
                                      SET_LOAD_SINGLE_FONT1_FLAG();
                                  }
                              }
                              #endif
 605   4      
 606   4                      u16StrIndex1++;
 607   4                      if( (*(pu8Strings1 + u16StrIndex1)) == 0xFF )
 608   4                      {
 609   5                          u16StrIndex1++;
 610   5                          u8ExtFontIndex1 = *(pu8Strings1 + u16StrIndex1);
 611   5                          u16StrIndex1++;
 612   5                      }
 613   4                  #if PropFontUseCommonArea
 614   4                      {
 615   5                          if (*(pu8Strings1+u16StrIndex1)>=SecondTblAddr)
 616   5                          {
 617   6                              if ( LanguageIndex == 1 )
 618   6                              {
 619   7                                  pstPropFontSet1218=tPropFontSet1;
 620   7                                  pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)-SecondTblAddr;
 621   7                              }
 622   6                              else if ( LanguageIndex == 2 )
 623   6                              {
 624   7                                  pstPropFontSet1218=tPropFontSet2;
 625   7                                  pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)-SecondTblAddr;
 626   7                              }
 627   6                          }
 628   5                          else
 629   5                          {
 630   6                              pstPropFontSet1218=tPropFontSet;
 631   6                              pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)+(u8ExtFontIndex1<<8)
             -;
 632   6                          }
 633   5                      }
 634   4                      #else
                              pstFontData1 = pstPropFontSet1218+*(pu8Strings1+u16StrIndex1)+(u8ExtFontIndex1<<8);
                              #endif
 637   4                      if ((pstFontData1->u8SpaceWidth & 0xF0)==0xF0)
 638   4                          u8NextFontW1 = (pstFontData1->u8SpaceWidth & 0x0F);
 639   4                      else
 640   4                          u8NextFontW1 = (FONT_WIDTH -( (pstFontData1->u8SpaceWidth & 0x0F) + ((pstFontData1->u8
             -SpaceWidth & 0xF0)>>4) ));
 641   4                      u8NextBit1=0;
 642   4                      if(*(pu8Strings1+u16StrIndex1) == 0x00)
 643   4                      {
 644   5                          if(u8BufW1<(FONT_WIDTH-SP_BETWEEN_FONT))
 645   5                          {
 646   6                              SET_LOAD_SINGLE_FONT1_FLAG();
 647   6                          }
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 12  

 648   5                          SET_STR1_1ST_CHAR_FLAG();
 649   5                          u16StrIndex1++;
 650   5                      }
 651   4                  }
 652   3              }
 653   2              else if(u16StrIndex1 >= u16FontCount1)
 654   2              {
 655   3                  if(u8BufW1)
 656   3                      u8BufW1 = 0;
 657   3                  SET_LOAD_SINGLE_FONT1_FLAG();
 658   3              }
 659   2      
 660   2              if(LOAD_SINGLE_FONT_FLAG&&LOAD_SINGLE_FONT1_FLAG)
 661   2              {
 662   3      #if 0
                          if(LOAD_SINGLE_LINE_FLAG)
                          {
                              ShiftFontUpDown(tSN, u8UDShift);
                          }
                          else//if(!IsLoadsingleLine)
                          {
                              ShiftFontUpDown(tSN, u8UDShift);
                              ShiftFontUpDown(tSN1,u8UDShift1);
                              MergeFontBuf(tSN, tSN1);
                          }
                          OSDLoadOneFont(tSN);
                          u8FontCnt++;
                          ClearFontBuf(tSN);
                          ClearFontBuf(tSN1);
              #else   //Jison, Speed up
 678   3                  if(LOAD_SINGLE_LINE_FLAG)
 679   3                  {
 680   4                      if (u8UDShift&0x7F)
 681   4                          ShiftFontUpDown(tSN, u8UDShift);
 682   4                      if (g_u8ByPassLength)
 683   4                          g_u8ByPassLength--;
 684   4                      else
 685   4                      {
 686   5                          OSDLoadOneFont(tSN);
 687   5                          u8FontCnt++;
 688   5                      }
 689   4                      ClearFontBuf(tSN);
 690   4                  }
 691   3                  else
 692   3                  {
 693   4                      if (u8UDShift&0x7F)
 694   4                          ShiftFontUpDown(tSN, u8UDShift);
 695   4                      if (u8UDShift1&0x7F)
 696   4                          ShiftFontUpDown(tSN1,u8UDShift1);
 697   4                      MergeFontBuf(tSN, tSN1);
 698   4                      OSDLoadOneFont(tSN);
 699   4                      u8FontCnt++;
 700   4                      ClearFontBuf(tSN);
 701   4                      ClearFontBuf(tSN1);
 702   4                  }
 703   3      #endif
 704   3                  CLR_LOAD_SINGLE_FONT_FLAG();
 705   3                  CLR_LOAD_SINGLE_FONT1_FLAG();
 706   3              }
 707   2      
 708   2          }
 709   1          //msWriteByte(OSDIOA, OWEND_B|OSBM_B|ORBW_B);
C51 COMPILER V9.60.0.0   LOADPROPFONT1218                                                  12/25/2020 09:24:12 PAGE 13  

 710   1          return u8FontCnt;
 711   1      }
 712          
 713          #if 0//ENABLE_PERSONALIZE_MENU
              //u8UDShift, Bit 7==1 means shift up
              //u16Size is the total bytes of u8FontTbl
              //for 12x18 only
              //The font table must not be compressed format.
              BYTE LoadShiftBmpFont(BYTE u8Addr, BYTE *u8FontTbl, WORD u16Size, BYTE u8UDShift)
              {
                  WORD i;
                  BYTE j,u8FontCnt=0;
                  WORD  idata tSN[FONT_HEIGHT];
              
                  msWriteByte(OSD2_A3, u8Addr);
                  i=0;
                  while(u8FontCnt<u16Size/27)
                  {
                      for (j=0;j<18;j+=2,i+=3) //Load on font to buffer
                      {
                          tSN[j]=u8FontTbl[i]&0x0f;
                          tSN[j]<<=8;
                          tSN[j]+=u8FontTbl[i+1];
                          tSN[j+1]=u8FontTbl[i]&0xf0;
                          tSN[j+1]<<=4;
                          tSN[j+1]+=u8FontTbl[i+2];
                      }
                      if (u8UDShift&0x7F)
                          ShiftFontUpDown(tSN, u8UDShift);
                      OSDLoadOneFont(tSN);
                      u8FontCnt++;
                  }
                  return u8FontCnt;
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2978    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      87
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      55
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
