C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DDC2BI
OBJECT MODULE PLACED IN .\Obj\DDC2Bi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\kernel\System\DDC2Bi.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\KERNEL\SYST
                    -EM\INC;..\KERNEL\SCALER\INC;..\DRIVER\extDEVICE\INC;..\LIB\INC;..\PANEL\INC;..\UI\BOARD;..\UI\INC;..\UI\MODEL;..\DRIVER\
                    -INC;..\Customer) DEFINE(ModelName=TSUMXX9_DEMO) DEBUG OBJECTEXTEND PRINT(.\List\DDC2Bi.lst) TABS(2) OBJECT(.\Obj\DDC2Bi.
                    -obj)

line level    source

   1          #include <math.h>
   2          #include "types.h"
   3          #include "board.h"
   4          #include "global.h"
   5          #include "Menudef.h"
   6          #include "menufunc.h"
   7          #include "adjust.h"
   8          //#include "msADC.h"
   9          #include "drvadc.h"
  10          #include "ms_reg.h"
  11          #include "msOSD.h"
  12          #include "autofunc.h"
  13          #include "ms_rwreg.h"
  14          #include "Debug.h"
  15          #include "Common.h"
  16          #include "misc.h"
  17          #include "mstar.h"
  18          #include "power.h"
  19          #include "keypaddef.h"
  20          #include "ddc2bi.h"
  21          #include "userpref.h"
  22          #include "msflash.h"
  23          #include "NVRam.h"
  24          #include "ddc.h"
  25          #include "gpio_def.h"
  26          #include "DDCColorHandler.h"
  27          
  28          #if ENABLE_DP_INPUT
              #include "drvDPRxApp.h"
              #endif
  31          
  32          
  33          #if ENABLE_DPS
  34          #include "drvOSD.h"
  35          #include "drvGPIO.h"
  36          #endif
  37          ////////////////////////////////////////////////////
  38          #include "drvDDC2Bi.h"
  39          //#include "halRwreg.h"
  40          ///////////////////////////////////////////////////
  41          
  42          extern Bool SetColor( void );
  43          extern Bool SetColorTemp();
  44          extern void CheckModeSettingRange( void );
  45          extern Bool CheckFactorySettingOutOfRange( void );
  46          extern void Init_FactorySetting( void );
  47          extern Bool xdata bFlashWriteFactory;
  48          
  49          BYTE AlignControl( void );
  50          #define ASSETSTARTADDR          0x600
  51          #define ASSETLENGTH             64
  52          
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 2   

  53          #if ENABLE_DP_INPUT
              #if DPENABLEMCCS
              BYTE idata ucfinal_status,g_ucDDC_TxRecord ;  // use idata to speedup
              WORD idata DDC2BI_INT_STS, DDC2BI_R_BUF, DDC2BI_W_BUF, DDC2BI_INT_CLR;
              code BYTE dpNullMsg[3]={0x6e, 0x80, 0xbe};
              static BYTE u8DDC_RxRecord = 0;
              #endif
              #endif
  61          //#if ENABLE_DPS
  62          //BYTE u8BackupOutDE_H,u8BackupOutDE_L;
  63          //#endif
  64          
  65          BYTE code MODEL_TYPE[] =
  66          {
  67              Model
  68          };
  69          extern xdata BYTE MenuPageIndex;
  70          extern xdata BYTE MenuItemIndex;
  71          BYTE code CAP_VCP[] =
  72          {
  73              "("
  74              "vcp(02 04 05 06 08 0E 10 12 14(01 05 06 08 0B) 16 18 1A 1E 20 30 3E "
  75              #if INPUT_TYPE!=INPUT_1A
  76              "60(01 03) "
  77              #endif
  78              #if AudioFunc
  79              "62 "
  80              #endif
  81              "6C 6E 70 C8 "
  82              "B0 B6 DF)"
  83              "prot(monitor)"
  84              "type(LCD)"
  85              "cmds(01 02 03 07 0C F3)"
  86              "mccs_ver(2.1)"
  87              "asset_eep(64)"
  88              "mpu_ver("FWVersion")"
  89              "model("Model")"
  90              "mswhql(1)"
  91              ")"
  92          };
  93          #if INPUT_TYPE!=INPUT_1A
  94          BYTE code DVI_CAP_VCP[] =
  95          {
  96              "("
  97              "vcp(02 04 05 08 10 12 14(01 05 06 08 0B) 16 18 1A 60(01 03)"
  98          #if AudioFunc
  99              "62 "
 100          #endif
 101              "6C 6E 70 C8 "
 102              "B0 B6 DF)"
 103              "prot(monitor)"
 104              "type(LCD)"
 105              "cmds(01 02 03 07 0C F3)"
 106              "mccs_ver(2.1)"
 107              "asset_eep(64)"
 108              "mpu_ver("FWVersion")"
 109              "model("Model")"
 110              "mswhql(1)"
 111              ")"
 112          };
 113          #endif
 114          void DDC2Bi_InitRx( void )
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 3   

 115          {
 116   1          rxStatus = DDC2B_CLEAR;
 117   1          rxIndex = 0;
 118   1      }
 119          void DDC2Bi_Init( void )
 120          {
 121   1          drvDDC2Bi_Init();
 122   1      }
 123          void DDC2Bi_GetTxBuffer( void )
 124          {
 125   1          BYTE i;
 126   1          for( i = MAX_TXWAIT_DELAY; i > 0; i-- )
 127   1              if( txStatus == DDC2B_MSGON )
 128   1              {
 129   2                  Delay1ms( 1 );
 130   2              }
 131   1          txStatus = DDC2B_CLEAR;
 132   1      }
 133          BYTE DDC2Bi_ComputeChecksum( BYTE count )
 134          {
 135   1          BYTE CheckSum;
 136   1          BYTE i = 0;
 137   1          CheckSum = INITTxCK;
 138   1          for( ; count > 0; count-- )
 139   1              CheckSum ^= DDCBuffer[i++];
 140   1          return CheckSum;
 141   1      }
 142          void DDC2Bi_MessageReady( void )
 143          {
 144   1          drvDDC2Bi_MessageReady();
 145   1      }
 146          void DDC2Bi_ParseCommand( void )
 147          {
 148   1          drvDDC2Bi_ParseCommand();
 149   1      }
 150          void DDC2Bi_CommandHandler( void )
 151          {
 152   1          if( rxStatus == DDC2B_COMPLETED )
 153   1          {
 154   2              DDC2Bi_ParseCommand();
 155   2              Clr_RxBusyFlag();
 156   2              DDC2Bi_InitRx();
 157   2          }
 158   1      }
 159          void DoDDCCI( BYTE Source ) // Annie 2006.7.5
 160          {
 161   1          drvDoDDCCI(Source);
 162   1      }
 163          void ISR_DDC2Bi(void)
 164          {
 165   1      #if (CHIP_ID==CHIP_TSUMC || CHIP_ID==CHIP_TSUMK || CHIP_ID==CHIP_TSUMD || CHIP_ID==CHIP_TSUMJ || CHIP_ID==
             -CHIP_TSUM9 || CHIP_ID==CHIP_TSUMF)
 166   1          if( ADC_INT_FLAG &( BIT3 | BIT4 ) )
 167   1          {
 168   2              DoDDCCI( InputCombo_A0 );
 169   2              CLR_ADC_INT_FLAG();
 170   2          }
 171   1        #if DDC_Port_D0
 172   1          else if( DDCDVI0_INT_FLAG &( BIT3 | BIT4 ) )
 173   1          {
 174   2              DoDDCCI( InputCombo_D0 );
 175   2              CLR_DVI0_INT_FLAG();
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 4   

 176   2          }
 177   1        #endif
 178   1        #if DDC_Port_D1
                  else if( DDCDVI1_INT_FLAG &( BIT3 | BIT4 ) )
                  {
                      DoDDCCI( InputCombo_D1 );
                      CLR_DVI1_INT_FLAG();
                  }
                #endif
 185   1        #if DDC_Port_D2
                  else if( DDCDVI2_INT_FLAG &( BIT3 | BIT4 ) )
                  {
                      DoDDCCI( InputCombo_D2 );
                      CLR_DVI2_INT_FLAG();
                  }
                #endif
 192   1      
 193   1      #else // CHIP_ID != CHIP_TSUMC
                  if( ADC_INT_FLAG &( BIT3 | BIT4 ) )
                  {
                      DoDDCCI( Input_Analog1 );
                      CLR_ADC_INT_FLAG();
                  }
                #if INPUT_TYPE!=INPUT_1A
                  else if( DDCDVI_INT_FLAG &( BIT3 | BIT4 ) )
                  {
                      DoDDCCI( Input_Digital );
                      CLR_DVI_INT_FLAG();
                  }
                #endif
                #if ENABLE_HDMI
                  else if( DDCHDMI_INT_FLAG & ( BIT3 | BIT4 ) )
                  {
                      DoDDCCI( Input_HDMI );
                      CLR_HDMI_INT_FLAG();
                  }
                #endif
              #endif // #if CHIP_ID == CHIP_TSUMC
 214   1      }
 215          
 216          
 217          #if  ENABLE_DP_INPUT
              #if  DPENABLEMCCS
              #if (CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF)
              //================= DP =====================
              
              void DDC2BI_DP(void)     //Rockman
              {
              
                      BYTE u8AUXCH_RxCmd;
                      BYTE u8DDC_Length;
                      #define u8DDC_RxOnGoing u8DDC_RxRecord
              
                      u8AUXCH_RxCmd = (msRegs[REG_0638 + Aux])&0x0F;
                      u8DDC_Length = msRegs[REG_063A+ Aux];
                      //===============//<write>PC Read Command============================
                       if(u8AUXCH_RxCmd & _BIT0)    //DP Tx
                      {
              
                          if (u8DDC_Length)
                          {
              
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 5   

                              if(rxStatus == DDC2B_CLEAR && txLength)
                              {
                                  while(u8DDC_Length-- && txLength)
                                  {
                                      if(g_ucDDC_TxRecord)
                                      {
                                          msRegs[REG_06F3]=DDCBuffer[g_ucDDC_TxRecord-1];
                                          //msRegs[REG_06F3]= test[g_ucDDC_TxRecord-1];
                                          txLength--;
                                      }
                                      else
                                          msRegs[REG_06F3] =DDC2B_DEST_ADDRESS;
              
                        msRegs[REG_06F2 ] = BIT0;
                        while( ! (((msRegs[REG_06F2])&BIT2)))   // Wait
                                  {}
                                  msRegs[REG_06F2 ] = BIT1;              // Clear
                                       g_ucDDC_TxRecord++;
                                  }
                              }
                              else
                              {
                                  while(u8DDC_Length--)
                                  {
                                       msRegs[REG_06F3]= dpNullMsg[g_ucDDC_TxRecord++];
                                       msRegs[REG_06F2 ] = BIT0;
                        while( ! (((msRegs[REG_06F2])&BIT2)))   // Wait
                                  {}
                                  msRegs[REG_06F2 ] = BIT1;              // Clear
              
              
                                  }
                              }
                          }
              
                      }
                      //===============//<write>PC Write Command============================
                      else if(u8AUXCH_RxCmd==0x00 || u8AUXCH_RxCmd==0x04)    //DP Rx
                                     {
                              if (u8DDC_Length)
                              {
                                  if (!u8DDC_RxOnGoing)
                                  {
                                      BYTE xdata temp;
                                      msRegs[REG_06F0]= msRegs[REG_06F0]|_BIT0;
                                       while( ! (((msRegs[REG_06F0])&BIT2)))    // Wait
                                  {}
                                 msRegs[REG_06F0 ] = BIT1;               // Clear
                                      temp=msRegs[REG_0675];
                                      rxIndex=0;
                                      u8DDC_RxOnGoing=TRUE;
                                      u8DDC_Length--;
                                  }
                                  while(u8DDC_Length--)
                                  {
                                       BYTE xdata temp1=10;
                                          msRegs[REG_06F0]= msRegs[REG_06F0]|_BIT0;
                                          while( ! (((msRegs[REG_06F0])&BIT2)))   // Wait
                                     {}
                                     msRegs[REG_06F0 ] = BIT1;
                                          DDCBuffer[rxIndex++] = msRegs[REG_0675];
                                          //DDCData[rxIndex++] = msRegs[REG_0675];
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 6   

                                  }
                              }
              
                              if (u8AUXCH_RxCmd==0x00)
                              {
                                  u8DDC_RxOnGoing=FALSE;
                                  g_ucDDC_TxRecord=0;
                                  rxStatus = DDC2B_COMPLETED;
                                  txLength=0;
                              }
              
                      }
                              msRegs[REG_0679 + Aux]= msRegs[REG_0679 + Aux]|_BIT7;//Clear Interrupt
                              msRegs[REG_0679 + Aux]= 0x00;
              
                      #undef u8DDC_RxOnGoing
              
              
              }
              #else
              void DDC2BI_DP(void)
              {
              
                      BYTE u8AUXCH_RxCmd;
                      BYTE u8DDC_Length;
                      #define u8DDC_RxOnGoing u8DDC_RxRecord
              
                      u8AUXCH_RxCmd = (msRegs[REG_0638 + Aux])&0x0F;
                      u8DDC_Length = msRegs[REG_063A+ Aux];
                      //===============//<write>PC Read Command============================
                       if(u8AUXCH_RxCmd & _BIT0)    //DP Tx
                      {
              
                          if (u8DDC_Length)
                          {
                              if(rxStatus == DDC2B_CLEAR && txLength)
                              {
                                  while(u8DDC_Length-- && txLength)
                                  {
                                      if(g_ucDDC_TxRecord)
                                      {
                                          msRegs[REG_06D3 + Aux]=DDCBuffer[g_ucDDC_TxRecord-1];
                                          txLength--;
                                      }
                                      else
                                          msRegs[REG_06D3 + Aux]=DDC2B_DEST_ADDRESS;
              
                                          g_ucDDC_TxRecord++;
                                  }
                              }
                              else
                              {
                                  while(u8DDC_Length--)
                                  {
                                       msRegs[REG_06D3 + Aux]= dpNullMsg[g_ucDDC_TxRecord++];
                                  }
                              }
                          }
              
                      }
                      //===============//<write>PC Write Command============================
                      else if(u8AUXCH_RxCmd==0x00 || u8AUXCH_RxCmd==0x04)    //DP Rx
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 7   

                                     {
                              if (u8DDC_Length)
                              {
                                  if (!u8DDC_RxOnGoing)
                                  {
                                      BYTE xdata temp;
                                      msRegs[REG_06FC + Aux]= msRegs[REG_06FC + Aux]|_BIT2;
                                      temp=msRegs[REG_0675 + Aux];
                                      rxIndex=0;
                                      u8DDC_RxOnGoing=TRUE;
                                      u8DDC_Length--;
                                  }
                                  while(u8DDC_Length--)
                                  {
                                       BYTE xdata temp1=10;
                                          msRegs[REG_06FC + Aux]= msRegs[REG_06FC + Aux]|_BIT2;
                                          while(temp1--){};
                                          temp1=10;
                                          DDCBuffer[rxIndex++] = msRegs[REG_0675 + Aux];
                                  }
                              }
              
                              if (u8AUXCH_RxCmd==0x00)
                              {
                                  u8DDC_RxOnGoing=FALSE;
                                  g_ucDDC_TxRecord=0;
                                  rxStatus = DDC2B_COMPLETED;
                                  txLength=0;
                              }
              
                      }
                              msRegs[REG_0679 + Aux]= msRegs[REG_0679 + Aux]|_BIT7;//Clear Interrupt
                              msRegs[REG_0679 + Aux]= 0x00;
              
                      #undef u8DDC_RxOnGoing
              
              
              }
              #endif
              
              void msDP_DDC2BI(void)
              {
                   if(msRegs[REG_0678]&_BIT7 //DP1
              #if(( DVI_PORT==TMDS_PORT_C) ||( HDMI_PORT==TMDS_PORT_C))//#if (CInput_Displayport_C3 !=  CInput_Nothing) 
             -// DP2
                || msRegs[REG_0778]&_BIT7
              #endif
                 )   //MCCS Interrupt
                  {
                     msRegs[REG_1839] =     msRegs[REG_1839] +1;
                      DDC2BI_DP() ;
                  }
              }
              
              #endif
              #endif
 417          #if DDCCI_FILTER_FUNCTION // 111228 coding not ready
              Bool DDCCICommandExecutable(void)
              {
                  BYTE CommandCode, CPCode;
                  Bool bresult = TRUE;
              
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 8   

                  CommandCode = DDCBuffer[1];
                  CPCode = DDCBuffer[2];
              
              // check others conditions
              
                  if(!DDCciFlag)
                  {
                      if( CommandCode == SETVCPFeature || CommandCode == GETVCPFeature )
                      {
                          CPCode = DDCBuffer[2];
                          if( CPCode != 0xFE )
                              return FALSE;
                      }
                      else
                      {
                          return FALSE;
                      }
                  }
              
                  if(CommandCode == SETVCPFeature || CommandCode == SETPagedVCP)
                  {
                      switch(CPCode)
                      {
                          case Geometry_Reset:
                          case ADJ_Clock:
                          case Auto_Setup:
                          case Auto_Color:
                          case ADJ_HorizontalPos:
                          case ADJ_VerticalPos:
                          case ADJ_Phase:
                              if(!CURRENT_INPUT_IS_VGA())
                                  bresult = FALSE;
                          break;
              
                          case ADJ_Brightness:
                          case ADJ_Contrast:
                              if(!UserPrefDcrMode&&(UserPrefECOMode==ECO_Standard))
                                  bresult = FALSE;
                          break;
              
                          default:
                          break;
                      }
                  }
                  else if(CommandCode == GETVCPFeature || CommandCode == GETPagedVCP)
                  {
                      switch(CPCode)
                      {
                          case Geometry_Reset:
                          case ADJ_Clock:
                          case Auto_Setup:
                          case Auto_Color:
                          case ADJ_HorizontalPos:
                          case ADJ_VerticalPos:
                          case ADJ_Phase:
                              if(!CURRENT_INPUT_IS_VGA())
                                  bresult = FALSE;
                          break;
              
                          default:
                          break;
                      }
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 9   

                  }
              
                  return bresult;
              
              }
              #endif
 491          //===================================================
 492          BYTE AlignControl( void )
 493          {
 494   1          BYTE CommandCode, CPCode, ValueH, ValueL, RetValueH, RetValueL, PageValue;
 495   1          BYTE TPValue;
 496   1          WORD WordValue;
 497   1          WORD WordAddr;
 498   1      
 499   1          CommandCode = DDCBuffer[1];
 500   1          PageValue = 0;
 501   1      #if DDCCI_ENABLE
 502   1          if ( !DDCciFlag )           //We can adjust the W/B By DDC2BI When DDCCI Is Disable
 503   1      #endif //When DDCCI_ENABLE=0,we use below to disable DDCCI and Use it to adjust W/B
 504   1          {
 505   2              if( CommandCode == SETVCPFeature || CommandCode == GETVCPFeature )
 506   2              {
 507   3                  CPCode = DDCBuffer[2];
 508   3                  if( CPCode != 0xFE 
 509   3        #if ENABLE_HDMI_DRR_MCCS
                     &&(CPCode != HDMI_FREESYNC_VCP) 
                     #endif//wtx add AMD MCCS
 512   3      )
 513   3                      return FALSE;
 514   3              }
 515   2              else
 516   2                  return FALSE;
 517   2          }
 518   1      
 519   1      #if DDCCI_DEBUG_ENABLE
                  Osd_Show();
                  Osd_Draw4Num( 15, 0, DDCBuffer[1] );
                  Osd_Draw4Num( 15, 1, DDCBuffer[2] );
                  Osd_Draw4Num( 15, 2, DDCBuffer[3] );
                  Osd_Draw4Num( 15, 3, DDCBuffer[4] );
                  Osd_Draw4Num( 15, 4, DDCBuffer[5] );
                  //Delay1ms(1000);
              #endif
 528   1      
 529   1          if( CommandCode == SETVCPFeature )
 530   1          {
 531   2              CPCode = DDCBuffer[2];
 532   2              RetValueH = DDCBuffer[3];
 533   2              RetValueL = DDCBuffer[4];
 534   2              WordValue = (( WORD )DDCBuffer[3] << 8 ) | (( WORD )DDCBuffer[4] );
 535   2          }
 536   1          else if( CommandCode == GETVCPFeature )
 537   1          {
 538   2              CPCode = DDCBuffer[2];
 539   2          }
 540   1          else if( CommandCode == ModeChangeRequest )
 541   1          {
 542   2              CPCode = DDCBuffer[2];
 543   2              ValueH = DDCBuffer[3];
 544   2          }
 545   1          else if( CommandCode == GETPagedVCP )
 546   1          {
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 10  

 547   2              PageValue = DDCBuffer[2];
 548   2              CPCode = DDCBuffer[3];
 549   2          }
 550   1          else if( CommandCode == SETPagedVCP )
 551   1          {
 552   2              PageValue = DDCBuffer[2];
 553   2              CPCode = DDCBuffer[3];
 554   2              RetValueH = DDCBuffer[4];
 555   2              RetValueL = DDCBuffer[5];
 556   2              WordValue = (( WORD )DDCBuffer[4] << 8 ) | (( WORD )DDCBuffer[5] );
 557   2          }
 558   1          else if( CommandCode == CapabilitiesRequest )        // 1-6
 559   1          {
 560   2              RetValueH = DDCBuffer[2];
 561   2              RetValueL = DDCBuffer[3];
 562   2              WordAddr = (( WORD )DDCBuffer[2] << 8 ) | (( WORD )DDCBuffer[3] );
 563   2              #if INPUT_TYPE!=INPUT_1A
 564   2              if( CURRENT_INPUT_IS_TMDS()
 565   2      #if ENABLE_DP_INPUT
                      || CURRENT_INPUT_IS_DISPLAYPORT()
              #endif
 568   2                  )
 569   2                  WordValue = sizeof( DVI_CAP_VCP );
 570   2              else
 571   2              #endif
 572   2                  WordValue = sizeof( CAP_VCP );
 573   2              if( WordAddr >= WordValue )
 574   2              {
 575   3                  DDCBuffer[0] = 0x83;
 576   3                  DDCBuffer[1] = 0xE3;
 577   3                  return 3;
 578   3              }
 579   2      #define CapLen CPCode
 580   2              CapLen = ( WordAddr + 32 >= WordValue ) ? ( WordValue - WordAddr ) : 32;
 581   2              DDCBuffer[0] = CapLen + 3 + 0x80;
 582   2              DDCBuffer[1] = 0xE3;
 583   2              DDCBuffer[2] = RetValueH;
 584   2              DDCBuffer[3] = RetValueL;
 585   2              for( ValueL = 4; ValueL < CapLen + 4; ValueL++ )
 586   2              {
 587   3                  #if INPUT_TYPE!=INPUT_1A
 588   3                  if( CURRENT_INPUT_IS_TMDS()
 589   3              #if ENABLE_DP_INPUT
                      || CURRENT_INPUT_IS_DISPLAYPORT()
                      #endif
 592   3              )
 593   3                      DDCBuffer[ValueL] = DVI_CAP_VCP[WordAddr + ValueL - 4];
 594   3                  else
 595   3                  #endif
 596   3                      DDCBuffer[ValueL] = CAP_VCP[WordAddr + ValueL - 4];
 597   3              }
 598   2      #undef CapLen
 599   2              return DDCBuffer[0] &~0x80;
 600   2          }
 601   1          else if( CommandCode == EnableApp )
 602   1          {
 603   2              DDCBuffer[0] = 0x80;
 604   2              return 0; //0xFE;
 605   2          }
 606   1          else if( CommandCode == AppTest )
 607   1          {
 608   2              DDCBuffer[0] = 0x80;
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 11  

 609   2              return 0; //0xFD;
 610   2          }
 611   1          else if( CommandCode == GetTimingRequest )
 612   1          {
 613   2              DDCBuffer[0] = 0x06;
 614   2              DDCBuffer[1] = 0x4E;
 615   2              DDCBuffer[2] = SyncPolarity( SrcFlags );
 616   2              if( UnsupportedModeFlag )
 617   2                  DDCBuffer[2] |= 0x80;
 618   2              if( !InputTimingStableFlag )
 619   2                  DDCBuffer[2] |= 0x40;
 620   2              WordValue = HFreq( SrcHPeriod ) * 10;
 621   2              DDCBuffer[3] = WordValue >> 8;
 622   2              DDCBuffer[4] = WordValue & 0x00FF;
 623   2              WordValue = VFreq( WordValue, SrcVTotal );
 624   2              DDCBuffer[5] = WordValue >> 8;
 625   2              DDCBuffer[6] = WordValue & 0x00FF;
 626   2              return 6;
 627   2          }
 628   1      #if ENABLE_DeltaE
              //*******************************************************************************************
              //MSTART OnLine AutoColorTool COMMAND*********************************************************************
             -******
              //*******************************************************************************************
                else if ( CommandCode == MStar_Command )
                {
                      return ColorCalibrationHandler();
                }
              #endif
 637   1      
 638   1      #if ENABLE_DPS
 639   1           else if( CommandCode == MS_DPS_COMMAND)
 640   1          {
 641   2              if(DDCBuffer[2] == MS_SET_EnableFrameColor_DPS)
 642   2              {
 643   3                  if(DDCBuffer[3]==0x01)
 644   3                  {
 645   4                      bRunToolFlag = 1;
 646   4                      #if 0//CHIP_ID == CHIP_TSUMV
                              msWriteBit(OSD1_02,1,BIT2);
                              msWriteBit(OSD1_03,1,BIT3);
                              msWriteByte(OSD2_E0,0x05);
                              msWriteByte(OSD2_E8,0x80);
                              msWriteByte(OSD2_E9,0x07);
                              msWriteByte(OSD2_EA,0x38);
                              msWriteByte(OSD2_EB,0x04);
                              msWriteByte(OSD2_EC,0x3F);
                              msWriteByte(OSD2_F4,0x66);
                              msWriteByte(OSD2_F5,0x06);
                              msWriteBit( SC0_04,0, BIT6 );
                              #elif 0//CHIP_ID == CHIP_TSUMU
                              msWriteBit(0x1C81, 0 , BIT7);
                              msWriteByteMask(0x1C15,BIT3|BIT2, BIT3|BIT2);
                              msWriteBit(0x1C16, 1 , BIT7);
                              msWriteBit(0x1D04, 1 , BIT2);
                              #else
 664   4                      mStar_SetupFreeRunMode();
 665   4                      drvOSD_FrameColorEnable(1);
 666   4                      #endif
 667   4                      return 3;
 668   4                  }
 669   3                  else
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 12  

 670   3                  {
 671   4                      bRunToolFlag = 0;
 672   4                      #if 0//CHIP_ID == CHIP_TSUMV
                              msWriteByte(OSD2_E0,00);
                              msWriteBit(OSD1_02,0,BIT2);
                              msWriteBit(OSD1_03,0,BIT3);
                              msWriteBit( SC0_04,1, BIT6 );
                              #elif 0//CHIP_ID == CHIP_TSUMU
                              msWriteByteMask(0x1C15,0, BIT3|BIT2);
                              msWriteBit(0x1C16, 0 , BIT7);
                              msWriteBit(0x1D04, 0 , BIT2);
                              #else
 682   4                      msWriteBit( SC0_02,0, BIT7 );
 683   4                      drvOSD_FrameColorEnable(0);
 684   4                      #endif
 685   4                      return 3;
 686   4                  }
 687   3              }
 688   2              else if(DDCBuffer[2] == MS_SET_FrameColor_DPS)
 689   2              {
 690   3                      #if 0//CHIP_ID == CHIP_TSUMV
                              msWriteByte(OSD2_F6,DDCBuffer[3]);
                              msWriteByte(OSD2_F7,DDCBuffer[4]);
                              msWriteByte(OSD2_F8,DDCBuffer[5]);
                              #elif 0//CHIP_ID == CHIP_TSUMU
                              msWriteByte(0x1D06,DDCBuffer[3]);
                              msWriteByte(0x1D07,DDCBuffer[4]);
                              msWriteByte(0x1D08,DDCBuffer[5]);
                              #else
 699   3                      drvOSD_FrameColorRGB(DDCBuffer[3],DDCBuffer[4],DDCBuffer[5]);
 700   3                      #endif
 701   3                      return 5;
 702   3              }
 703   2              else if(DDCBuffer[2] == MS_SET_AdjustPWM_DPS)
 704   2              {
 705   3                  mStar_AdjustBrightness(DDCBuffer[3]);
 706   3              }
 707   2              else if(DDCBuffer[2] == MS_SET_Adjust_REAL_PWM_DPS)
 708   2              {
 709   3      #if ENABLE_LED_CONTROLLER
                          msLED_DimmingPWMAdjust(DDCBuffer[3]);
              #else
 712   3                  drvGPIO_SetBacklightDuty(BrightnessPWM,DDCBuffer[3]);
 713   3      #endif
 714   3              }
 715   2          }
 716   1      #endif
 717   1      
 718   1              //preliminary judge cmd finish, start detail process----------------------------------------------
             -----
 719   1      
 720   1          if( CommandCode == GETVCPFeature || CommandCode == GETPagedVCP )
 721   1          {
 722   2              if( CommandCode == GETVCPFeature )
 723   2              {
 724   3                  DDCBuffer[0] = 0x88;
 725   3                  DDCBuffer[1] = 0x02;
 726   3                  DDCBuffer[2] = 0x00;
 727   3                  DDCBuffer[3] = CPCode;
 728   3                  DDCBuffer[4] = 0x01;
 729   3                  ValueH = 0x00;
 730   3                  ValueL = 0xFF;
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 13  

 731   3                  RetValueH = 0x00;
 732   3                  TPValue = 0x01;
 733   3              }
 734   2              else
 735   2              {
 736   3                  DDCBuffer[0] = 0x89;
 737   3                  DDCBuffer[1] = 0xC7;
 738   3                  DDCBuffer[2] = 0x00;
 739   3                  DDCBuffer[3] = PageValue;
 740   3                  DDCBuffer[4] = CPCode;
 741   3                  DDCBuffer[5] = 0x01;
 742   3                  ValueH = 0x00;
 743   3                  ValueL = 0xFF;
 744   3                  RetValueH = 0x00;
 745   3                  TPValue = 0x01;
 746   3              }
 747   2      
 748   2              if( CPCode == NewControl && PageValue == 0 )
 749   2              {
 750   3                  RetValueL = 1;
 751   3                  ValueL = 2;
 752   3              }
 753   2              else if( CPCode == ALL_Reset && PageValue == 0 )
 754   2              {
 755   3                  RetValueL = 0;
 756   3                  ValueL = 1;
 757   3              }
 758   2      
 759   2              else if( CPCode == BriCon_Reset && PageValue == 0 )
 760   2              {
 761   3                  RetValueL = 0;
 762   3                  ValueL = 1;
 763   3              }
 764   2              else if( CPCode == Geometry_Reset && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 765   2              {
 766   3                  RetValueL = 0;
 767   3                  ValueL = 1;
 768   3              }
 769   2              else if( CPCode == Color_Reset && PageValue == 0 )
 770   2              {
 771   3                  RetValueL = 0;
 772   3                  ValueL = 1;
 773   3              }
 774   2        #if ENABLE_HDMI_DRR_MCCS
                else if(CPCode == HDMI_FREESYNC_VCP)
                {
                  TPValue = 0x00;
                  ValueH = 0x00;
                      ValueL = 0x01;
                      RetValueH = 0x00;
                  RetValueL = UserprefFreeSyncMode;
                }
                #endif//wtx add AMD MCCS
 784   2      
 785   2              else if( CPCode == ADJ_Clock && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 786   2              {
 787   3                  RetValueH = 0;
 788   3                  RetValueL = GetClockValue();
 789   3                  ValueH = 0;
 790   3                  ValueL = 100;
 791   3                  TPValue = 0x00;
 792   3              }
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 14  

 793   2              else if( CPCode == ADJ_Brightness && PageValue == 0 )
 794   2              {
 795   3                  ValueL = MaxBrightnessValue - MinBrightnessValue;
 796   3                  RetValueL = UserPrefBrightness - MinBrightnessValue;
 797   3                  TPValue = 0x00;
 798   3              }
 799   2              else if( CPCode == ADJ_Contrast && PageValue == 0 )
 800   2              {
 801   3                  RetValueH = 0;
 802   3                  RetValueL = GetContrastValue();
 803   3                  ValueH = 0;
 804   3                  ValueL = 100;
 805   3                  TPValue = 0x00;
 806   3              }
 807   2              else if( CPCode == Select_Color_Preset && PageValue == 0 )
 808   2              {
 809   3                  ValueL = 0x0D; //0x0B
 810   3                  if( UserPrefColorTemp == CTEMP_SRGB )
 811   3                      RetValueL = 0x01;
 812   3                  else if( UserPrefColorTemp == CTEMP_6500K )
 813   3                      RetValueL = 0x05;
 814   3                  else if( UserPrefColorTemp == CTEMP_9300K )
 815   3                      RetValueL = 0x08;
 816   3                  else if( UserPrefColorTemp == CTEMP_USER )
 817   3                      RetValueL = 0x0B;
 818   3                  TPValue = 0x00;
 819   3              }
 820   2              else if(( CPCode == ADJ_Red_Gain ) && PageValue == 0 )
 821   2              {
 822   3                  ValueL = 100;
 823   3                  RetValueL = GetRedColorValue();
 824   3                  TPValue = 0x00;
 825   3              }
 826   2              else if(( CPCode == ADJ_Green_Gain ) && PageValue == 0 )
 827   2              {
 828   3                  ValueL = 100;
 829   3                  RetValueL = GetGreenColorValue();
 830   3                  TPValue = 0x00;
 831   3              }
 832   2              else if(( CPCode == ADJ_Blue_Gain ) && PageValue == 0 )
 833   2              {
 834   3                  ValueL = 100;
 835   3                  RetValueL = GetBlueColorValue();
 836   3                  TPValue = 0x00;
 837   3              }
 838   2              else if( CPCode == Auto_Setup && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 839   2              {
 840   3                  RetValueL = 0;
 841   3                  ValueL = 1;
 842   3              }
 843   2              else if( CPCode == Auto_Color && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 844   2              {
 845   3                  RetValueL = 0;
 846   3                  ValueL = 1;
 847   3              }
 848   2              else if( CPCode == ADJ_HorizontalPos && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 849   2              {
 850   3                  ValueH = 0; //(MaxHStart - MinHStart)>> 8;
 851   3                  ValueL = 100; // (MaxHStart - MinHStart) & 0x00FF;
 852   3                  RetValueH = ( MaxHStart - UserPrefHStart ) >> 8;
 853   3                  RetValueL = ( MaxHStart - UserPrefHStart ) & 0x00FF;
 854   3                  TPValue = 0x00;
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 15  

 855   3              }
 856   2              else if( CPCode == ADJ_VerticalPos && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 857   2              {
 858   3                  RetValueH = 0x00;
 859   3                  RetValueL = GetVPositionValue();
 860   3                  ValueH = 0x0;
 861   3                  ValueL = 100;
 862   3                  TPValue = 0x00;
 863   3              }
 864   2              else if( CPCode == ADJ_Phase && PageValue == 0 && CURRENT_INPUT_IS_VGA())
 865   2              {
 866   3                  RetValueH = 0x00;
 867   3                  RetValueL = GetFocusValue();
 868   3                  ValueH = 0x0;
 869   3                  ValueL = 100;
 870   3                  TPValue = 0x00;
 871   3              }
 872   2              else if( CPCode == Select_InputSource )
 873   2              {
 874   3                  ValueH = 0x00;
 875   3                  ValueL = 0x04;
 876   3                  if(CURRENT_INPUT_IS_VGA())
 877   3                      RetValueL = 0x01;
 878   3                  else
 879   3                      RetValueH = 0x03;
 880   3                  TPValue = 0x00;
 881   3              }
 882   2      #if AudioFunc
 883   2              else if( CPCode == ADJ_SpeakerVolume && PageValue == 0 )
 884   2              {
 885   3                  ValueH = 0;
 886   3                  ValueL = 100;
 887   3                  RetValueL = UserPrefVolume;
 888   3                  RetValueH = 0;
 889   3                  TPValue = 0x00;
 890   3              }
 891   2      #endif
 892   2              else if( CPCode == ADJ_Red_Blacklevel && PageValue == 0 )
 893   2              {
 894   3                  ValueH = 0x00;
 895   3                  ValueL = 100;
 896   3                  RetValueL = UserprefRedBlackLevel;
 897   3                  TPValue = 0;
 898   3              }
 899   2              else if( CPCode == ADJ_Green_Blacklevel && PageValue == 0 )
 900   2              {
 901   3                  ValueH = 0x00;
 902   3                  ValueL = 100;
 903   3                  RetValueL = UserprefGreenBlackLevel;
 904   3                  TPValue = 0;
 905   3              }
 906   2              else if( CPCode == ADJ_Blue_Blacklevel && PageValue == 0 )
 907   2              {
 908   3                  ValueH = 0x00;
 909   3                  ValueL = 100;
 910   3                  RetValueL = UserprefBlueBlackLevel;
 911   3                  TPValue = 0;
 912   3              }
 913   2              else if( CPCode == H_Frequency && PageValue == 0 )
 914   2              {
 915   3                  ValueH = 0xFF;
 916   3                  ValueL = 0xFF;
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 16  

 917   3                  WordValue = HFreq( SrcHPeriod ) * 10;
 918   3                  RetValueH = WordValue >> 8;
 919   3                  RetValueL = WordValue & 0x00ff;
 920   3                  TPValue = 0x01;
 921   3              }
 922   2              else if( CPCode == V_Frequency && PageValue == 0 )
 923   2              {
 924   3                  ValueH = 0xFF;
 925   3                  ValueL = 0xFF;
 926   3                  WordValue = HFreq( SrcHPeriod ) * 10;
 927   3                  WordValue = VFreq( WordValue, SrcVTotal );
 928   3                  RetValueH = WordValue >> 8;
 929   3                  RetValueL = WordValue & 0x00ff;
 930   3                  TPValue = 0x01;
 931   3              }
 932   2              else if( CPCode == FlatPanellayout )
 933   2              {
 934   3                  ValueL = 8;
 935   3                  RetValueL = 1;
 936   3              }
 937   2              else if( CPCode == MonitorType && PageValue == 0 )
 938   2              {
 939   3                  RetValueH = 0;
 940   3                  RetValueL = 3;
 941   3                  ValueH = 0x00;
 942   3                  ValueL = 0x08;
 943   3                  TPValue = 0x00;
 944   3              }
 945   2              else if( CPCode == DisplayControlType )
 946   2              {
 947   3                  ValueH = 0xFF;
 948   3                  ValueL = 0x16;
 949   3                  RetValueH = 0;
 950   3                  RetValueL = 5; // Mean Mstar
 951   3              }
 952   2              else if( CPCode == FWLevel )
 953   2              {
 954   3                  ValueH = 0xFF;
 955   3                  ValueL = 0xFF;
 956   3                  RetValueL = 0;
 957   3                  RetValueH = 0;
 958   3              }
 959   2              else if( CPCode == ADJ_Language && PageValue == 0 )
 960   2              {
 961   3      #if 0//LANGUAGE_TYPE
                          ValueL = LANG_Nums;
                          if( UserPrefLanguage == LANG_English )
                              RetValueL = 2;
                          else if( UserPrefLanguage == LANG_Spanish )
                              RetValueL = 10;
                          else if( UserPrefLanguage == LANG_France )
                              RetValueL = 3;
                          else if( UserPrefLanguage == LANG_German )
                              RetValueL = 4;
                          else if( UserPrefLanguage == LANG_Italian )
                              RetValueL = 5;
                          else if( UserPrefLanguage == LANG_Portugues )
                              RetValueL = 8;
                          else if( UserPrefLanguage == LANG_Russia )
                              RetValueL = 9;
                          else if( UserPrefLanguage == LANG_SChina )
                              RetValueL = 1;
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 17  

                          TPValue = 0x00;
              #endif
 981   3              }
 982   2              else if( CPCode == VCPVersion && PageValue == 0 )
 983   2              {
 984   3                  RetValueL = 1;
 985   3                  RetValueH = 2;
 986   3                  ValueH = 0xFF;
 987   3                  ValueL = 0xFF;
 988   3              }
 989   2              else
 990   2              {
 991   3                  DDCBuffer[2] = 0x01;
 992   3                  RetValueL = 0x00;
 993   3                  ValueH = 0xFF;
 994   3                  ValueL = 0xFF;
 995   3              }
 996   2      
 997   2              if( CommandCode == GETVCPFeature )
 998   2              {
 999   3                  DDCBuffer[4] = TPValue;
1000   3                  DDCBuffer[5] = ValueH;
1001   3                  DDCBuffer[6] = ValueL;
1002   3                  DDCBuffer[7] = RetValueH;
1003   3                  DDCBuffer[8] = RetValueL;
1004   3                  return 8;
1005   3              }
1006   2              else
1007   2              {
1008   3                  DDCBuffer[5] = TPValue;
1009   3                  DDCBuffer[6] = ValueH;
1010   3                  DDCBuffer[7] = ValueL;
1011   3                  DDCBuffer[8] = RetValueH;
1012   3                  DDCBuffer[9] = RetValueL;
1013   3                  return 9;
1014   3              }
1015   2      
1016   2          }
1017   1      
1018   1          else if( CommandCode == SETVCPFeature || CommandCode == SETPagedVCP )
1019   1          {
1020   2              DDCBuffer[2] = 0x00; // Result Code
1021   2              ValueH = 0x00;
1022   2              ValueL = 0xFF;
1023   2              TPValue = 0x01;
1024   2              if( CPCode == NewControl && PageValue == 0 )
1025   2              {
1026   3                  ValueL = 2;
1027   3              }
1028   2              else if( CPCode == ALL_Reset && PageValue == 0 )
1029   2              {
1030   3                  if( WordValue != 0 )
1031   3                  {
1032   4                      ResetAllSetting();
1033   4                      // wait for checking
1034   4                      //msWriteByte( BK0_2B, 0x80 );
1035   4                      //msWriteByte( BK0_2C, 0x80 );
1036   4                      //msWriteByte( BK0_2D, 0x80 );
1037   4                  }
1038   3                  ValueL = 1;
1039   3              }
1040   2              else if( CPCode == BriCon_Reset && PageValue == 0 )
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 18  

1041   2              {
1042   3                  if( WordValue != 0 )
1043   3                  {
1044   4                      UserPrefBrightness = DefBrightness;
1045   4                      UserPrefContrast = DefContrast;
1046   4      
1047   4                      UserPrefBrightnessUser = UserPrefBrightness;
1048   4                      UserPrefContrastUser = UserPrefContrast;
1049   4      
1050   4                      UserPrefBrightnessCool1 = UserPrefBrightness;
1051   4                      UserPrefContrastCool1 = UserPrefContrast;
1052   4      
1053   4                      UserPrefBrightnessWarm1 = UserPrefBrightness;
1054   4                      UserPrefContrastWarm1 = UserPrefContrast;
1055   4      
1056   4                      UserPrefBrightnessNormal = UserPrefBrightness;
1057   4                      UserPrefContrastNormal = UserPrefContrast;
1058   4      
1059   4                      UserPrefBrightnessSRGB = UserPrefBrightness;
1060   4                      UserPrefContrastSRGB = UserPrefContrast;
1061   4      
1062   4      
1063   4                      mStar_AdjustBrightness( UserPrefBrightness );
1064   4                      mStar_AdjustContrast( UserPrefContrast );
1065   4                  }
1066   3                  ValueL = 1;
1067   3              }
1068   2              else if( CPCode == Geometry_Reset && PageValue == 0 && INPUT_IS_VGA(rxInputPort))
1069   2              {
1070   3                  if( WordValue != 0 && CURRENT_INPUT_IS_VGA())
1071   3                      ResetGeometry();
1072   3                  ValueL = 1;
1073   3                  TPValue = 0x00;
1074   3              }
1075   2              else if( CPCode == Color_Reset && PageValue == 0 )
1076   2              {
1077   3                  UserPrefRedColorUser = DefRedColor;
1078   3                  UserPrefGreenColorUser = DefGreenColor;
1079   3                  UserPrefBlueColorUser = DefBlueColor;
1080   3                  UserprefRedBlackLevel = 50;
1081   3                  UserprefGreenBlackLevel = 50;
1082   3                  UserprefBlueBlackLevel = 50;
1083   3                  mStar_AdjustUserPrefBlacklevel( UserprefRedBlackLevel, UserprefGreenBlackLevel, UserprefBlueBl
             -ackLevel );
1084   3                  UserPrefColorTemp = CTEMP_5400K; //CTEMP_9300K 20051115 wmz
1085   3                  if( WordValue != 0 )
1086   3                      SetColorTemp();
1087   3                  ValueL = 1;
1088   3              }
1089   2              else if( CPCode == ADJ_Clock && PageValue == 0 && CURRENT_INPUT_IS_VGA())
1090   2              {
1091   3                  {
1092   4                      UserPrefHTotal = (( WordValue * ( MaxClock - MinClock ) + 50 ) / 0x64 + MinClock );
1093   4                      drvADC_AdjustHTotal( UserPrefHTotal );
1094   4                  }
1095   3                  TPValue = 0x00;
1096   3              }
1097   2              else if( CPCode == ADJ_Brightness && PageValue == 0 )
1098   2              {
1099   3                 if(!UserPrefDcrMode&&(UserPrefECOMode==ECO_Standard))  //111108 add B/C adjustment condition - 
             -ID40189
1100   3                  {
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 19  

1101   4                      UserPrefBrightness = RetValueL + MinBrightnessValue;
1102   4                      if( UserPrefColorTemp == CTEMP_USER )
1103   4                      {
1104   5                          UserPrefBrightnessUser = UserPrefBrightness;
1105   5                      }
1106   4                      else if( UserPrefColorTemp == CTEMP_9300K )
1107   4                      {
1108   5                          UserPrefBrightnessCool1 = UserPrefBrightness;
1109   5                      }
1110   4                      else if( UserPrefColorTemp == CTEMP_5400K )
1111   4                      {
1112   5                          UserPrefBrightnessWarm1 = UserPrefBrightness;
1113   5                      }
1114   4                      else if( UserPrefColorTemp == CTEMP_6500K )
1115   4                      {
1116   5                          UserPrefBrightnessNormal = UserPrefBrightness;
1117   5                      }
1118   4                      else if( UserPrefColorTemp == CTEMP_SRGB )
1119   4                      {
1120   5                          UserPrefBrightnessSRGB = UserPrefBrightness;
1121   5                      }
1122   4                      mStar_AdjustBrightness( UserPrefBrightness );
1123   4                  }
1124   3                  ValueL = MaxBrightnessValue - MinBrightnessValue;
1125   3                  TPValue = 0x00;
1126   3              }
1127   2              else if( CPCode == ADJ_Contrast && PageValue == 0 )
1128   2              {
1129   3                  //Osd_Hide();
1130   3                  //if (RetValueL <= (MaxContrastValue - MinContrastValue))
1131   3                  if(!UserPrefDcrMode&&(UserPrefECOMode==ECO_Standard))  //111108 add B/C adjustment condition -
             - ID40189
1132   3                  {
1133   4                      UserPrefContrast = RetValueL ;
1134   4                      if( UserPrefColorTemp == CTEMP_USER )
1135   4                      {
1136   5                          UserPrefContrastUser = UserPrefContrast;
1137   5                      }
1138   4                      else if( UserPrefColorTemp == CTEMP_9300K )
1139   4                      {
1140   5                          UserPrefContrastCool1 = UserPrefContrast;
1141   5                      }
1142   4                      else if( UserPrefColorTemp == CTEMP_5400K )
1143   4                      {
1144   5                          UserPrefContrastWarm1 = UserPrefContrast;
1145   5                      }
1146   4                      else if( UserPrefColorTemp == CTEMP_6500K )
1147   4                      {
1148   5                          UserPrefContrastNormal = UserPrefContrast;
1149   5                      }
1150   4                      else if( UserPrefColorTemp == CTEMP_SRGB )
1151   4                      {
1152   5                          UserPrefContrastSRGB = UserPrefContrast;
1153   5                      }
1154   4                      mStar_AdjustContrast( UserPrefContrast );
1155   4                  }
1156   3                  ValueL = 100;
1157   3                  TPValue = 0x00;
1158   3              }
1159   2              else if( CPCode == Select_Color_Preset && PageValue == 0 )
1160   2              {
1161   3                  if( RetValueL == 0x01 )
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 20  

1162   3                      UserPrefColorTemp = CTEMP_SRGB;
1163   3                  else if( RetValueL == 0x05 )
1164   3                      UserPrefColorTemp = CTEMP_6500K;
1165   3                  else if( RetValueL == 0x06 )
1166   3                      UserPrefColorTemp = CTEMP_6500K;
1167   3                  else if( RetValueL == 0x08 )
1168   3                      UserPrefColorTemp = CTEMP_9300K;
1169   3                  else if( RetValueL == 0x0B )
1170   3                      UserPrefColorTemp = CTEMP_USER;
1171   3                  SetColorTemp();//Setcolortemp();
1172   3                  ValueL = 0x0D; //0x0B
1173   3                  TPValue = 0x00;
1174   3              }
1175   2              else if( CPCode == ADJ_Red_Gain && PageValue == 0 )
1176   2              {
1177   3                  if( UserPrefColorTemp == CTEMP_USER )
1178   3                  {
1179   4                      //if(RetValueL<=20)
1180   4                      // RetValueL=20;
1181   4                      UserPrefRedColorUser = UserPrefRedColor = ((( DWORD )RetValueL * ( MaxColorValue - MinColo
             -rValue ) ) / 100 + MinColorValue );
1182   4                      //UserPrefRedColorUser=UserPrefRedColor = RetValueL*MaxColorValue/100;
1183   4                      mStar_AdjustRedColor( UserPrefRedColor, UserPrefContrast );
1184   4                  }
1185   3                  ValueL = 100;//(MaxColorValue - MinColorValue);
1186   3                  TPValue = 0x00;
1187   3              }
1188   2              else if( CPCode == ADJ_Green_Gain && PageValue == 0 )
1189   2              {
1190   3                  if( UserPrefColorTemp == CTEMP_USER )
1191   3                  {
1192   4                      //if(RetValueL<=20)
1193   4                      // RetValueL=20;
1194   4                      UserPrefGreenColorUser = UserPrefGreenColor = ((( DWORD )RetValueL * ( MaxColorValue - Min
             -ColorValue ) ) / 100 + MinColorValue );
1195   4                      // UserPrefGreenColorUser = UserPrefGreenColor = RetValueL*MaxColorValue/100 ;
1196   4                      mStar_AdjustGreenColor( UserPrefGreenColor, UserPrefContrast );
1197   4                  }
1198   3                  ValueL = 100;//(MaxColorValue - MinColorValue);
1199   3                  TPValue = 0x00;
1200   3              }
1201   2              else if( CPCode == ADJ_Blue_Gain && PageValue == 0 )
1202   2              {
1203   3                  if( UserPrefColorTemp == CTEMP_USER )
1204   3                  {
1205   4                      //if(RetValueL<=20)
1206   4                      //RetValueL=20;
1207   4                      UserPrefBlueColorUser = UserPrefBlueColor = ((( DWORD )RetValueL * ( MaxColorValue - MinCo
             -lorValue ) ) / 100 + MinColorValue );
1208   4                      //UserPrefBlueColorUser = UserPrefBlueColor = RetValueL*MaxColorValue/100;
1209   4                      mStar_AdjustBlueColor( UserPrefBlueColor, UserPrefContrast );
1210   4                  }
1211   3                  ValueL = 100;//(MaxColorValue - MinColorValue);
1212   3                  TPValue = 0x00;
1213   3              }
1214   2              else if( CPCode == Auto_Setup && PageValue == 0 && CURRENT_INPUT_IS_VGA())
1215   2              {
1216   3                  if( WordValue != 0 )
1217   3                      AutoConfig();
1218   3                  ValueL = 1;
1219   3              }
1220   2              else if( CPCode == Auto_Color && PageValue == 0 && CURRENT_INPUT_IS_VGA())
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 21  

1221   2              {
1222   3                  if( WordValue != 0 )
1223   3                      mStar_AutoColor();
1224   3                  ValueL = 1;
1225   3              }
1226   2              else if( CPCode == ADJ_HorizontalPos && PageValue == 0 && CURRENT_INPUT_IS_VGA())
1227   2              {
1228   3                  {
1229   4                      UserPrefHStart = MaxHStart - WordValue;
1230   4                      mStar_AdjustHPosition( UserPrefHStart );
1231   4                  }
1232   3                  ValueH = ( MaxHStart - MinHStart ) >> 8;
1233   3                  ValueL = ( MaxHStart - MinHStart ) & 0x00FF;
1234   3                  TPValue = 0x00;
1235   3              }
1236   2              else if( CPCode == ADJ_VerticalPos && PageValue == 0 && CURRENT_INPUT_IS_VGA())
1237   2              {
1238   3                  UserPrefVStart = ( WORD )WordValue * ( MaxVStart - MinVStart ) / 100 + MinVStart;
1239   3                  mStar_AdjustVPosition( UserPrefVStart );
1240   3                  TPValue = 0x00;
1241   3              }
1242   2              else if( CPCode == ADJ_Phase && PageValue == 0 && CURRENT_INPUT_IS_VGA())
1243   2              {
1244   3                  {
1245   4                      UserPrefPhase = ( WORD )WordValue * (MAX_PHASE_VALUE+1) / 100 + 0.5;
1246   4                      if( UserPrefPhase > MAX_PHASE_VALUE )
1247   4                          UserPrefPhase = MAX_PHASE_VALUE;
1248   4                      drvADC_SetPhaseCode( UserPrefPhase );
1249   4                  }
1250   3                  TPValue = 0x00;
1251   3              }
1252   2              else if( CPCode == DDCCI_Settings && PageValue == 0 )
1253   2              {
1254   3                  if(CURRENT_INPUT_IS_VGA())
1255   3                  {
1256   4                  #if USEFLASH
1257   4                      Set_FlashForceSaveModeFlag();
1258   4                  #else
                              SaveModeSetting();
                          #endif
1261   4                  }
1262   3                  #if USEFLASH
1263   3                  Set_FlashForceSaveMonitorFlag();
1264   3                  #else
                          SaveMonitorSetting();
                          #endif
1267   3                  TPValue = 0x00;
1268   3              }
1269   2              else if( CPCode == Select_InputSource && PageValue == 0 )
1270   2              {
1271   3                  if( RetValueL == 0x01 || RetValueL == 0x02 )
1272   3                  {
1273   4              UserPrefInputType=Input_VGA;
1274   4              ChangeSource();
1275   4                   }
1276   3      
1277   3                  if( RetValueL == 0x03 || RetValueL == 0x04 )
1278   3                  {
1279   4                      #if INPUT_TYPE!=INPUT_1A
1280   4              UserPrefInputType=Input_Digital;
1281   4              ChangeSource();
1282   4              #endif
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 22  

1283   4                  }
1284   3      
1285   3                  TPValue = 0x00;
1286   3              }
1287   2      #if AudioFunc
1288   2              else if( CPCode == ADJ_SpeakerVolume && PageValue == 0 )
1289   2              {
1290   3                  UserPrefVolume = RetValueL;
1291   3                  mStar_AdjustVolume( UserPrefVolume );
1292   3                  TPValue = 0x00;
1293   3              }
1294   2      #endif
1295   2              else if(( CPCode == ADJ_Red_Blacklevel || CPCode == ADJ_Green_Blacklevel || CPCode == ADJ_Blue_Bla
             -cklevel ) && PageValue == 0 )
1296   2              {
1297   3                  if( CPCode == ADJ_Red_Blacklevel )
1298   3                      UserprefRedBlackLevel = RetValueL;
1299   3                  else if( CPCode == ADJ_Green_Blacklevel )
1300   3                      UserprefGreenBlackLevel = RetValueL;
1301   3                  else if( CPCode == ADJ_Blue_Blacklevel )
1302   3                      UserprefBlueBlackLevel = RetValueL;
1303   3                  mStar_AdjustUserPrefBlacklevel( UserprefRedBlackLevel, UserprefGreenBlackLevel, UserprefBlueBl
             -ackLevel );
1304   3                  //SaveMonitorSetting();
1305   3              }
1306   2              else if( CPCode == ADJ_Language && PageValue == 0 )
1307   2              {
1308   3      #if 0//LANGUAGE_TYPE
                          if( RetValueL == 2 )
                              UserPrefLanguage = LANG_English;
                          else if( RetValueL == 10 )
                              UserPrefLanguage = LANG_Spanish;
                          else if( RetValueL == 3 )
                              UserPrefLanguage = LANG_France;
                          else if( RetValueL == 4 )
                              UserPrefLanguage = LANG_German;
                          else if( RetValueL == 5 )
                              UserPrefLanguage = LANG_Italian;
                          else if( RetValueL == 8 )
                              UserPrefLanguage = LANG_Portugues;
                          else if( RetValueL == 9 )
                              UserPrefLanguage = LANG_Russia;
                          else if( RetValueL == 1 )
                              UserPrefLanguage = LANG_SChina;
                          ValueL = LANG_Nums;
                          TPValue = 0x00;
              #endif
1328   3              }
1329   2              else if( CPCode == SyncType && PageValue == 0 )
1330   2              {
1331   3                  ValueL = 3;
1332   3                  RetValueL = 0;
1333   3              }
1334   2              else
1335   2              {
1336   3                  DDCBuffer[2] = 0x01;
1337   3              }
1338   2      
1339   2              if( CommandCode == SETVCPFeature )
1340   2              {
1341   3                      return 0;
1342   3              }
C51 COMPILER V9.60.0.0   DDC2BI                                                            12/22/2020 19:50:33 PAGE 23  

1343   2              else
1344   2              {
1345   3                  DDCBuffer[0] = 0x89;
1346   3                  DDCBuffer[1] = 0xC7;
1347   3                  DDCBuffer[3] = PageValue;
1348   3                  DDCBuffer[4] = CPCode;
1349   3                  DDCBuffer[5] = TPValue;
1350   3                  DDCBuffer[6] = ValueH;
1351   3                  DDCBuffer[7] = ValueL;
1352   3                  DDCBuffer[8] = RetValueH;
1353   3                  DDCBuffer[9] = RetValueL;
1354   3                  return 9;
1355   3              }
1356   2          }
1357   1          else if( CommandCode == SaveCurrentSetting )
1358   1          {
1359   2          #if USEFLASH
1360   2              Set_FlashForceSaveMonitorFlag();
1361   2              Set_FlashForceSaveModeFlag();
1362   2          #else
                      SaveMonitorSetting();
                      SaveModeSetting();
                  #endif
1366   2              return 0;
1367   2          }
1368   1          else if( CommandCode == GETVCPPage )
1369   1          {
1370   2              DDCBuffer[0] = 0x83;
1371   2              DDCBuffer[1] = 0xC5;
1372   2              DDCBuffer[2] = 0;
1373   2              DDCBuffer[3] = 3;
1374   2              return 3;
1375   2          }
1376   1          DDCBuffer[0] = 0x80;
1377   1          return 0;
1378   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3337    ----
   CONSTANT SIZE    =    417    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
