C51 COMPILER V9.60.0.0   MENUSTRFUNC                                                       12/22/2020 19:50:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MENUSTRFUNC
OBJECT MODULE PLACED IN .\Obj\MenuStrFunc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\UI\MenuStrFunc.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\KERNEL\SYSTEM\INC
                    -;..\KERNEL\SCALER\INC;..\DRIVER\extDEVICE\INC;..\LIB\INC;..\PANEL\INC;..\UI\BOARD;..\UI\INC;..\UI\MODEL;..\DRIVER\INC;..
                    -\Customer) DEFINE(ModelName=TSUMXX9_DEMO) DEBUG OBJECTEXTEND PRINT(.\List\MenuStrFunc.lst) TABS(2) OBJECT(.\Obj\MenuStrF
                    -unc.obj)

line level    source

   1          #include "types.h"
   2          #include "global.h"
   3          #include "board.h"
   4          #include "ms_reg.h"
   5          #include "drvOSD.h"
   6          #include "ms_rwreg.h"
   7          //#include "MenuStr.h"
   8          #include "ColorPalette.h"
   9          #include "msosd.h"
  10          #include "menudef.h"
  11          
  12          #if CHIP_ID==CHIP_TSUMV
              extern BYTE xdata g_u8OsdWndNo;
              #endif
  15          extern BYTE xdata OsdFontColor;
  16          
  17          extern xdata BYTE MenuPageIndex;
  18          extern xdata BYTE MenuItemIndex;
  19          
  20          BYTE code ASCII2FONT[256] =  /* OSD character table */
  21          {
  22              /*           0        1        2          3   4        5        6        7   8        9       A       
             -  B          C       D        E        F   */
  23              /*00H*/0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  24              //                     " "
  25              /*10H*/0x19, 0x02, 0x27, 0x1c, 0x27, 0x28, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  26              //                     "-"     " . "
  27              /*20H*/0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00,
  28              //
  29              /*30H*/0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  30              //             0        1        2       3        4        5        6        7        8       9
  31              /*40H*/0x00, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
  32              //                      A        B        C       D        E        F        G       H        I       
             - J        K        L        M       N        O
  33              /*50H*/0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00,
  34              //             P        Q       R        S       T        U        V       W       X        Y       Z
  35              /*60H*/0x00, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
  36              //                      a        b        c        d        e       f         g        h        i     
             -    j        k        l         m       n        o
  37              /*70H*/0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
  38              //            p       q         r        s        t         u       v        w       x        y       
             - z
  39              /*80H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  40              //
  41              /*90H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  42              //
  43              /*A0H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  44              //
  45              /*B0H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  46              //
  47              /*C0H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  48              //
C51 COMPILER V9.60.0.0   MENUSTRFUNC                                                       12/22/2020 19:50:28 PAGE 2   

  49              /*D0H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  50              //
  51              /*E0H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  52              //
  53              /*F0H*/0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  54              //
  55          };
  56          
  57          BYTE code tSpace7[] =
  58          {
  59              0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, '\0'
  60          };
  61          
  62          
  63          void Osd_DrawStr( BYTE xPos, BYTE yPos, BYTE *str )
  64          {
  65   1      #if CHIP_ID>=CHIP_TSUMV
  66   1          WORD u16TempValue;
  67   1          BYTE u8DrawCode = (!(yPos & BIT7));
  68   1      
  69   1          yPos &= 0x7F;
  70   1          u16TempValue=GET_TXT_CASTART(g_u8OsdWndNo,xPos,yPos); // get real address
  71   1          
  72   1      #define dispChar    xPos
  73   1      #define dispPtr     yPos
  74   1          dispPtr = 0;
  75   1          WRITE_CAFSRAM_ADDR();
  76   1          msWrite2Byte(PORT_ATTR_ADDR, u16TempValue); // display font attribute
  77   1          WRITE_ATTRIBUTE();
  78   1          while( *( str + dispPtr ) )        // display string font index
  79   1          {
  80   2              msWriteByte(PORT_ATTR_DATA, OsdFontColor);
  81   2              dispPtr++;
  82   2          }
  83   1          if( u8DrawCode )
  84   1          {
  85   2              dispPtr = 0;
  86   2         WRITE_CAFSRAM_ADDR();
  87   2              msWrite2Byte(PORT_CODE_ADDR, u16TempValue); // dispaly font code
  88   2              WRITE_CODE();
  89   2              while( dispChar = *( str + dispPtr ) )            // display string font index
  90   2              {
  91   3                  msWriteByte(PORT_CODE_DATA, ASCII2FONT[dispChar]);
  92   3                  dispPtr++;
  93   3              }
  94   2          }
  95   1      #undef dispChar
  96   1      #undef dispPtr
  97   1      #else
                  
                  WORD tempValue;
                  BYTE drawCode = (!(yPos & BIT7));   
                
                  yPos &= 0x7F; //~(BIT7|BIT6);
              #define dispChar    xPos
              #define dispPtr     yPos
                  tempValue = ( WORD )yPos * OsdWindowWidth + xPos; // get real address
                  dispPtr = 0;
                  msWrite2Byte( OSD2_A8, tempValue );
                  while( dispChar = *( str + dispPtr ) )
                      // display string font index
                  {
C51 COMPILER V9.60.0.0   MENUSTRFUNC                                                       12/22/2020 19:50:28 PAGE 3   

                      msWriteByte( OSD2_AA, OsdFontColor );
                      dispPtr++;
                  }
                  if( drawCode )
                  {
                      dispPtr = 0;
                      msWrite2Byte( OSD2_A5, tempValue );
                      while( dispChar = *( str + dispPtr ) )            // display string font index
                      {
                          msWriteByte( OSD2_A7, ASCII2FONT[dispChar] );
                          dispPtr++;
                      }
                  }
              #undef dispChar
              #undef dispPtr
                 
              #endif
 128   1      
 129   1      }
 130          
 131          
 132          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    171    ----
   CONSTANT SIZE    =    264    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
