C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MSDSC_SETTING
OBJECT MODULE PLACED IN .\Obj\msDSC_Setting.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\KERNEL\SCALER\msDSC_Setting.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\KERN
                    -EL\SYSTEM\INC;..\KERNEL\SCALER\INC;..\DRIVER\extDEVICE\INC;..\LIB\INC;..\PANEL\INC;..\UI\BOARD;..\UI\INC;..\UI\MODEL;..\
                    -DRIVER\INC;..\Customer) DEFINE(ModelName=TSUMXX9_DEMO) DEBUG OBJECTEXTEND PRINT(.\List\msDSC_Setting.lst) TABS(2) OBJECT
                    -(.\Obj\msDSC_Setting.obj)

line level    source

   1          
   2          #include <math.h>
   3          #include "types.h"
   4          #include "board.h"
   5          #include "panel.h"
   6          #include "ms_rwreg.h"
   7          #include "NVRAM.h"
   8          #include "Mode.h"
   9          #include "UserPrefDef.h"
  10          #include "global.h"
  11          #include "misc.h"
  12          #include "menudef.h"
  13          #include "menufunc.h"
  14          #include "debug.h"
  15          #include "userpref.h"
  16          #include "msOSD.h"
  17          #include "msDSC_Handler.h"
  18          #include "msDSC_Setting.h"
  19          #include "msDSC_RegSetting.h"
  20          #include "MsACE.h"
  21          #include "Adjust.h"
  22          #include "MsDlc.h"
  23          #include "Common.h"
  24          
  25          //========================================================================================================
             -===========================================================:
  26          //#include "msDPS.h"
  27          //========================================================================================================
             -===========================================================:
  28          #if ENABLE_DSC
  29          
  30          #define  DSC_DEBUG  1
  31          #if (DSC_DEBUG&&ENABLE_DEBUG)
  32          #define DSC_printData(str, value)   printData(str, value)
  33          #define DSC_printMsg(str)               printMsg(str)
  34          #else
              #define DSC_printData(str, value)
              #define DSC_printMsg(str)
              #endif
  38          //#if ENABLE_DPS
  39          //extern xdata BOOL  REG_DPS_RUN_Flag =0;
  40          //#endif
  41          #if !SHARE_DLC_XDATA
  42          xdata WORD  ISR_SatHistogram32H[32]; // >>6
  43          #endif
  44          xdata BOOL  REG_DSC_RUN_Flag =0;
  45          
  46          xdata BYTE  ISR_preDSCLoopCount = 0;
  47          xdata BYTE  ISR_curDSCLoopCount = 0;
  48          xdata BYTE  u8Win = 0;
  49          xdata BYTE  Flag_DSC_Latch_Busy = 0;
  50          xdata WORD  CurxvYgain = 0x400;
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 2   

  51          
  52          //-------------------------------------------------------------------------------------------------
  53          void msAdjustPCXvyccContrast( BYTE bScalerWin, WORD uwContrast );
  54          //-------------------------------------------------------------------------------------------------
  55          //-------------------------------------------------------------------------------------------------
  56          //  Local Constant
  57          //-------------------------------------------------------------------------------------------------
  58          #if 1
  59          // matrix used to convert RGB color space to YUV color space for HDTV
  60          code short t_SDTVRgb2yuv[3][3] =
  61          {
  62          //<<11
  63              {  0x0264,    0x04B2,   0x00E9 },   //  0.299     0.587  0.114
  64              { -0x0160, -0x02B6,   0x0416 },     // -0.172   -0.339   0.511
  65              {  0x0416,  -0x036C, -0x00A9 }      //  0.511   -0.428  -0.083
  66          
  67          // <<10
  68          /*
  69              {  0x00DA,    0x02DC,   0x004A },   //  0.299     0.587  0.114
  70              { -0x0078, -0x0193,   0x020B },     // -0.172   -0.339   0.511
  71              {  0x020B,  -0x01DB, -0x0030 }      //  0.511   -0.428  -0.083
  72            */
  73          };
  74          code short t_SDTVYuv2rgb[3][3] =
  75          {
  76          //<<11
  77              {    0x0800,  -0x0000,  0x0AF9 },     // 1  -0.0003  1.3717
  78              {    0x0800, -0x02B1 ,-0x0596},     //  1   -0.3365 -0.6984
  79              {    0x0800,   0x0DDE ,-0x0003}      //  1   1.7336 -0.0016
  80          
  81             /* <<10
  82              {    0x0400,  -0x0000,  0x057C },     // 1  -0.0003  1.3717
  83              {    0x0400, -0x0158 ,-0x02CB},     //  1   -0.3365 -0.6984
  84              {    0x0400,   0x06EF ,-0x0001}      //  1   1.7336 -0.0016
  85             */
  86          };
  87          #else
              // matrix used to convert RGB color space to YUV color space for HDTV
              code short t_SDTVRgb2yuv[3][3] =
              {
                  {  0x00DA,  0x02DC,  0x004A }, // 0.213,  0.715,  0.072
                  { -0x0078, -0x0193,  0x020B }, // -0.117, -0.394, 0.511
                  {  0x020B, -0x01DB, -0x0030 }  // 0.511,  -0.464, -0.047
              };
              #if 0
              // matrix used to convert YUV color space to RGB color space, used for video input for HDTV
              code short t_SDTVYuv2rgb[3][3] =
              {
                  {   0x072C, 0x04A8,  0x0000 },     // 1.793,  1.164, 0
                  {  -0x0223, 0x04A8, -0x00DA },     // -0.534, 1.164, -0.213
                  {   0x0000, 0x04A8,  0x0876 }      // 0,      1.164, 2.115
              };
              #else
              code short t_SDTVYuv2rgb[3][3] =
              {
                  {    0x0400,  0x0000,0x072C },     // 1.793,  1.164, 0
                  {    0x0400, -0x00DA ,-0x0223},     // -0.534, 1.164, -0.213
                  {    0x0400,  0x0876 ,0x0000}      // 0,      1.164, 2.115
              };
              #endif
              #endif
 112          //========================================================================================================
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 3   

             -===========================================================:
 113          //========================================================================================================
             -===========================================================:
 114          void ArrayMultiply(short sFirst[3][3], short sSecond[3][3], short sResult[3][3], int Res)
 115          {
 116   1          BYTE LOCAL_TYPE ucRow, ucCol;
 117   1          for(ucRow=0; ucRow!=3; ucRow++)
 118   1          {
 119   2              for(ucCol=0; ucCol!=3; ucCol++)
 120   2              {
 121   3                  sResult[ucRow][ucCol] = (((long)sFirst[ucRow][0] * sSecond[0][ucCol]) +
 122   3                                           ((long)sFirst[ucRow][1] * sSecond[1][ucCol]) +
 123   3                                           ((long)sFirst[ucRow][2] * sSecond[2][ucCol])) >> Res;
 124   3             }
 125   2          }
 126   1      }
 127          //========================================================================================================
             -===========================================================:
 128          //========================================================================================================
             -===========================================================:
 129          #if DSC_UsexvYccColorMatrix_EN
 130          void msWritexvYCCColorMatrix(BYTE bScalerWin, short sResult[3][3])
 131          {
 132   1          BYTE  LOCAL_TYPE i,j;
 133   1          WORD  LOCAL_TYPE ucAddr;
 134   1          short LOCAL_TYPE sTmp;
 135   1      
 136   1          DB_Mode(eDB_NORMAL_MODE);
 137   1      
 138   1          if( bScalerWin == MAIN_WINDOW )
 139   1              ucAddr = SCE_04;
 140   1          else
 141   1              ucAddr = SCE_24;
 142   1      
 143   1          for(i=0; i!=3; i++)
 144   1          {
 145   2              for(j=0; j!=3; j++)
 146   2              {
 147   3              sTmp = sResult[i][j] ;
 148   3              #if DEBUG_ColorMaxrix_Value
                      DSC_printData("sTmp===%x",sTmp);
                      #endif
 151   3      
 152   3              #if ENABLE_SW_DOUBLE_BUFFER
 153   3              DB_W2B( ucAddr, sTmp );
 154   3              #else
                      msWrite2Byte( ucAddr, sTmp );
                      #endif
 157   3              ucAddr += 2;
 158   3              }
 159   2          }
 160   1      
 161   1      #if ENABLE_SW_DOUBLE_BUFFER
 162   1          msSWDBWriteToRegister();
 163   1          msSWDBWaitForRdy();
 164   1      #endif
 165   1      
 166   1      }
 167          #else
              void msWritexvYCCColorMatrix(BYTE bScalerWin, short sResult[3][3])
              {
              
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 4   

                   BYTE  LOCAL_TYPE i,j;
                  WORD  LOCAL_TYPE ucAddr;
                  short LOCAL_TYPE sTmp;
              
                  if( bScalerWin == MAIN_WINDOW )
                      ucAddr = SC8_82;
                  else
                      ucAddr = SC8_6E;
              
                  for(i=0; i!=3; i++)
                  {
                      for(j=0; j!=3; j++)
                      {
                         // sTmp = psMatrix[i*3+j];
                          sTmp = sResult[i][j] ;//&pstColor[i*3+j];
              
                          if( sTmp >= 0 )
                          {
                              if( sTmp > 0xfff )
                              {
                                  sTmp = 0xfff;
                              }
              
                      //printData("\r\n 111 ucAddr==>%x", ucAddr);
                      //printData("\r\n 111 sTmp==>%x", sTmp);
                              msWrite2Byte( ucAddr, sTmp );
                          }
                          else
                          {
                              sTmp = sTmp * -1;
                              if( sTmp > 0xfff )
                              {
                                  sTmp = 0xfff;
                              }
                              sTmp |= 0x1000;
                              //printData("\r\n 222  ucAddr==>%x", ucAddr);
                              //printData("\r\n 222  Data==>%x", sTmp);
              
                              msWrite2Byte( ucAddr, sTmp );
                          }
                          ucAddr += 2;
                      }
                  }
              }
              #endif
 216          //========================================================================================================
             -===========================================================:
 217          //========================================================================================================
             -===========================================================:
 218          #if DSC_UsexvYccColorMatrix_EN
 219          void msAdjustPCXvyccContrast( BYTE bScalerWin, WORD uwContrast )
 220          {
 221   1          BYTE LOCAL_TYPE i , j ;
 222   1          BYTE LOCAL_TYPE ucBank;
 223   1          XDATA short sResultTmp1[3][3];
 224   1          XDATA short sResultTmp2[3][3];
 225   1          XDATA short SatGainTmp1[3][3]={0};
 226   1          ucBank = msReadByte(SC0_00);
 227   1      
 228   1          SatGainTmp1[0][0]=(0x400<<1);
 229   1          SatGainTmp1[1][1]=(uwContrast<<1);
 230   1          SatGainTmp1[2][2]=(uwContrast<<1);
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 5   

 231   1          ArrayMultiply( SatGainTmp1,t_SDTVRgb2yuv, sResultTmp1,11);
 232   1          for(i=0; i<3; i++)
 233   1              for(j=0; j<3; j++)
 234   1              sResultTmp2[i][j] = sResultTmp1[i][j];
 235   1          ArrayMultiply( t_SDTVYuv2rgb,sResultTmp2, sResultTmp1,12);
 236   1      
 237   1          //if (i==100)
 238   1          msWritexvYCCColorMatrix(bScalerWin,sResultTmp1);
 239   1      
 240   1          if( bScalerWin == MAIN_WINDOW )
 241   1              msWriteByteMask(SCE_02, BIT1,BIT1); // Enable color matrix&Change R/B range
 242   1          else
 243   1              msWriteByteMask(SCE_22, BIT1,BIT1); // Enable color matrix&Change R/B range
 244   1          msWriteByte(SC0_00, ucBank); // Restore bank
 245   1      }
 246          #else
              void msAdjustPCXvyccContrast( BYTE bScalerWin, WORD uwContrast )
              {
                  XDATA short sResultTmp1[3][3];
                  XDATA short sResultTmp2[3][3];
                  XDATA short SatGainTmp1[3][3]={0};
                  BYTE LOCAL_TYPE i , j ;
                  BYTE LOCAL_TYPE ucBank;
                  ucBank = msReadByte(SC0_00);
                  SatGainTmp1[0][0]=0x400;
                  SatGainTmp1[1][1]=uwContrast;
                  SatGainTmp1[2][2]=uwContrast;
                  ArrayMultiply( SatGainTmp1,t_SDTVRgb2yuv, sResultTmp1,10);
                  for(i=0; i<3; i++)
                      for(j=0; j<3; j++)
                      sResultTmp2[i][j] = sResultTmp1[i][j];
                  ArrayMultiply( t_SDTVYuv2rgb,sResultTmp2, sResultTmp1,10);
                  //if (i==100)
                  msWritexvYCCColorMatrix(bScalerWin,sResultTmp1);
              
                  if( bScalerWin == MAIN_WINDOW )
                      msWriteByte(SC8_81, 0x80); // Enable color matrix&Change R/B range
                  else
                      msWriteByte(SC8_80, 0x80); // Enable color matrix&Change R/B range
              
                  msWriteByte(SC0_00, ucBank); // Restore bank
              }
              #endif
 274          
 275          //========================================================================================================
             -===========================================================:
 276          void msDSC_AdjustYgain ( WORD YgainValue ) // 2.10 format
 277          {
 278   1      #if DEBUG_SAT_HISTOGRAM
                  BYTE xdata i;
                  printMsg("\r\n ===== Sat Histogram Start ======");
                  for ( i = 0; i < 32; i++ )
                      DSC_printData("\r\n  %d", ISR_SatHistogram32H[i]);
                  DSC_printMsg("\r\n ===== Sat Histogram End ======");
              #endif
 285   1      if (!REG_DSC_RUN_Flag /*|| REG_DPS_RUN_Flag*/)
 286   1          YgainValue = 0x400;
 287   1      #if DEBUG_DSCSatgain
                  if (CurxvYgain != YgainValue)
                      DSC_printData("\r\n Sgain %x", YgainValue);
              #endif
 291   1      
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 6   

 292   1      if (CurxvYgain != YgainValue)
 293   1          msAdjustPCXvyccContrast ( u8Win, ( YgainValue & 0x0FFF ) ); // ratio: 0~3.99x
 294   1      
 295   1          CurxvYgain = YgainValue;
 296   1      
 297   1      #if DSC_EnablexvYCC_ForDebug//temp enable xvYCC
                  msWriteByteMask ( REG_ADDR_xvYCC_MAIN_COLOR_MATRIX_ENABLE, BIT1, BIT1 ); // 3x3 disable
                  msWriteByteMask ( REG_ADDR_xvYCC_SUB_COLOR_MATRIX_ENABLE , BIT1, BIT1 ); // 3x3 disable
              #endif
 301   1      
 302   1      }
 303          //========================================================================================================
             -===========================================================:
 304          //////////////////////////////////////////////////////////////////////////////////
 305          //////////////////////////////////////////////////////////////////////////////////
 306          ///// Function Declaration //////////////////////////////////////////////////////////////
 307          //////////////////////////////////////////////////////////////////////////////////
 308          //////////////////////////////////////////////////////////////////////////////////
 309          void msDSC_Interrupt ( void )
 310          {
 311   1          BYTE xdata ucTmp, ucBank;
 312   1          ucBank = scReadByte ( SC0_00 );
 313   1          scWriteByte ( REG_ADDR_INTENB, scReadByte ( REG_ADDR_INTENB ) & ( ~BIT3 ) );
 314   1          scWriteByte ( REG_ADDR_INTSTA, scReadByte ( REG_ADDR_INTSTA ) & ( ~BIT3 ) );
 315   1      
 316   1      #if UseHistrogramToTest
                  #if CHIP_ID == CHIP_TSUMY ||CHIP_ID == CHIP_TSUMB
                      scWriteByte(SC0_00, 0x03);
                  #elif CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHI
             -P_ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
                      scWriteByte(SC0_00, 0x07);
                  #endif
                  if ( ( scReadByte ( SC7_B8 ) &BIT3 ) && ( !Flag_DSC_Latch_Busy )) //if( (scRegs[0xB8]&BIT3) && (!Flag_
             -DPS_Latch_Busy) )
                  {
                      //u8Win=SUB_WINDOW;
                      scWriteByte(SC0_00, 0x08);
                      for ( ucTmp = 0; ucTmp < 32; ucTmp++ )
                      {
                          ISR_SatHistogram32H[ucTmp] = scReadByte ( SC8_C0 + ( 2 * ucTmp ) + 1 );
                          ISR_SatHistogram32H[ucTmp] <<= 8;
                          ISR_SatHistogram32H[ucTmp] |= scReadByte ( SC8_C0 + ( 2 * ucTmp ) );
                      }
              
                  #if CHIP_ID == CHIP_TSUMY || CHIP_ID == CHIP_TSUMB
                      scWriteByte(SC0_00, 0x03);
                  #elif CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHI
             -P_ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
                      scWriteByte(SC0_00, 0x07);
                  #endif
                      //Request Hist
                      scWriteByte ( SC7_B8, scReadByte ( SC7_B8 ) & 0xF0 ); //scRegs[0xB8] = scRegs[0xB8]&0xF0;
                      if ( MAIN_WINDOW == u8Win )
                      {
                          scWriteByte ( SC7_B8, scReadByte ( SC7_B8 ) | BIT2 | BIT1 );    //scRegs[0xB8] = scRegs[0xB8]|
             -BIT2|BIT1;
                      }
                      else
                      {
                          scWriteByte ( SC7_B8, scReadByte ( SC7_B8 ) | BIT2 | BIT0 );    //scRegs[0xB8] = scRegs[0xB8]|
             -BIT2|BIT0;
                      }
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 7   

                  }
                  scWriteByte(SC0_00, 0x00);
                  ISR_curDSCLoopCount++;
                  scWriteByte ( REG_ADDR_INTENB, scReadByte ( REG_ADDR_INTENB ) | BIT3 ); //scRegs[0xCE] = scRegs[0xCE]|
             -BIT3;
              #else
 353   1      
 354   1          #if CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID 
             -== CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 355   1              scWriteByte(SC0_00, 0x0F);
 356   1          #endif
 357   1          if ( ( scReadByte ( REG_ADDR_SATHIS_HANDSHAKE ) &BIT3 ) && ( !Flag_DSC_Latch_Busy )) //if( (scRegs[0xB
             -8]&BIT3) && (!Flag_DPS_Latch_Busy) )
 358   1          {
 359   2              //u8Win=SUB_WINDOW;
 360   2              for ( ucTmp = 0; ucTmp < 32; ucTmp++ )
 361   2              {
 362   3                  ISR_SatHistogram32H[ucTmp] = scReadByte ( REG_ADDR_SATHISTOGRAM_DATA_32 + ( 2 * ucTmp ) + 1 );
 363   3                  ISR_SatHistogram32H[ucTmp] <<= 8;
 364   3                  ISR_SatHistogram32H[ucTmp] |= scReadByte ( REG_ADDR_SATHISTOGRAM_DATA_32 + ( 2 * ucTmp ) );
 365   3              }
 366   2              //Request Hist
 367   2              scWriteByte ( REG_ADDR_SATHIS_HANDSHAKE, scReadByte ( REG_ADDR_SATHIS_HANDSHAKE ) & 0xF0 ); //scRe
             -gs[0xB8] = scRegs[0xB8]&0xF0;
 368   2              if ( MAIN_WINDOW == u8Win )
 369   2              {
 370   3                  scWriteByte ( REG_ADDR_SATHIS_HANDSHAKE, scReadByte ( REG_ADDR_SATHIS_HANDSHAKE ) | BIT2 | BIT
             -1 );    //scRegs[0xB8] = scRegs[0xB8]|BIT2|BIT1;
 371   3              }
 372   2              else
 373   2              {
 374   3                  scWriteByte ( REG_ADDR_SATHIS_HANDSHAKE, scReadByte ( REG_ADDR_SATHIS_HANDSHAKE ) | BIT2 | BIT
             -0 );    //scRegs[0xB8] = scRegs[0xB8]|BIT2|BIT0;
 375   3              }
 376   2          }
 377   1          ISR_curDSCLoopCount++;
 378   1      #if CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == C
             -HIP_TSUM9||CHIP_ID == CHIP_TSUMF
 379   1          scWriteByte(SC0_00, 0x00);
 380   1      #endif
 381   1      
 382   1          scWriteByte ( REG_ADDR_INTENB, scReadByte ( REG_ADDR_INTENB ) | BIT3 ); //scRegs[0xCE] = scRegs[0xCE]|
             -BIT3;
 383   1      #endif
 384   1          scWriteByte ( SC0_00, ucBank );
 385   1      }
 386          
 387          //========================================================================================================
             -===========================================================:
 388          static void SetSatHistogramRange ( WORD wVStart, WORD wVEnd, WORD wHStart, WORD wHEnd, BYTE Enable)
 389          {
 390   1          BYTE xdata ucBank;
 391   1          ucBank = scReadByte ( SC0_00 );
 392   1          if ( REG_ADDR_SATHISTOGRAM_RANGE_M_HST !=0xFF)
 393   1          {
 394   2              // Set histogram range - H
 395   2              // Main Window
 396   2              msWriteByte ( REG_ADDR_SATHISTOGRAM_RANGE_M_HST, wHStart );
 397   2              msWriteByte ( REG_ADDR_SATHISTOGRAM_RANGE_M_HST + 1, ( msReadByte( REG_ADDR_SATHISTOGRAM_RANGE_M_H
             -ST + 1 ) & 0xF0 ) | ( wHStart >> 8 ) );
 398   2              msWriteByte ( REG_ADDR_SATHISTOGRAM_RANGE_M_HEN, wHEnd );
 399   2              msWriteByte ( REG_ADDR_SATHISTOGRAM_RANGE_M_HEN + 1, ( msReadByte( REG_ADDR_SATHISTOGRAM_RANGE_M_H
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 8   

             -EN + 1 ) & 0xF0 ) | ( wHEnd >> 8 ) );
 400   2          }
 401   1          // Set histogram range - V
 402   1          // Main Window
 403   1          msWriteByte ( REG_ADDR_SATHISTOGRAM_RANGE_M_VST, wVStart / 8 );
 404   1          msWriteByte ( REG_ADDR_SATHISTOGRAM_RANGE_M_VEN, wVEnd / 8 );
 405   1      
 406   1          // Enable range for Histogram
 407   1          if(Enable)
 408   1          {
 409   2              msWriteByteMask ( REG_ADDR_SATHISTOGRAM_RANGE_H_ENABLE, BIT6 | BIT7, BIT6 | BIT7 );
 410   2              msWriteByteMask ( REG_ADDR_SATHISTOGRAM_RANGE_V_ENABLE, BIT4, BIT4 );
 411   2          }
 412   1          else
 413   1          {
 414   2              msWriteByteMask ( REG_ADDR_SATHISTOGRAM_RANGE_H_ENABLE, 0, BIT6 | BIT7 );
 415   2              msWriteByteMask ( REG_ADDR_SATHISTOGRAM_RANGE_V_ENABLE, 0, BIT4 );
 416   2          }
 417   1          scWriteByte ( SC0_00, ucBank );
 418   1      }
 419          //========================================================================================================
             -===========================================================:
 420          //////////////////////////////////////////////////////////////////////////////////
 421          ///// DSC initail ////////////////////////////////////////////////////////////////
 422          //////////////////////////////////////////////////////////////////////////////////
 423          void msDSC_Init( void )
 424          {
 425   1          //Default brightness 100
 426   1          CurxvYgain = 0x400;
 427   1          REG_DSC_RUN_Flag = 1;
 428   1          msDSC_FadingArea_Setting (FadingArea_0, Fading_area0_Cr_coordination,Fading_area0_Cb_coordination,Fadi
             -ng_Range);
 429   1          msDSC_FadingArea_Setting (FadingArea_1, Fading_area1_Cr_coordination,Fading_area1_Cb_coordination,Fadi
             -ng_Range);
 430   1      }
 431          //========================================================================================================
             -===========================================================:
 432          //////////////////////////////////////////////////////////////////////////////////
 433          ///// DPS On <--> Off Settings ///////////////////////////////////////////////////
 434          //////////////////////////////////////////////////////////////////////////////////
 435          void msDSC_On_Setting( void )
 436          {
 437   1          BYTE xdata ucBank = msReadByte ( SC0_00 );
 438   1      
 439   1          msDSC_Init();
 440   1          SetSatHistogramRange ( 0, ( PANEL_HEIGHT - 1 ), 0, ( PANEL_WIDTH - 1 ), 0 );
 441   1      
 442   1      #if UseHistrogramToTest
                  msWriteByteMask ( SC7_B5, BIT1, BIT1 ); //  histogram accelerate mode on
                  msWriteByteMask ( SC7_B8, 0, 0x0F );
                  if ( MAIN_WINDOW == u8Win ) // Main window
                      msWriteByteMask ( SC7_B8, BIT2 | BIT1, BIT2 | BIT1 | BIT0 );
                  else // Sub window
                      msWriteByteMask ( SC7_B8, BIT2 | BIT0, BIT2 | BIT1 | BIT0 );
                  //printData("... SC7_B5[]==>%x ...",msReadByte ( SC7_B5 ));
                  //printData("... SC7_B8[]==>%x ...",msReadByte ( SC7_B8 ));
              #else
 452   1          msWriteByteMask ( REG_ADDR_SATHISTOGRAM_Acceler_ENABLE, BIT1, BIT1 ); //  histogram accelerate mode on
 453   1          msWriteByteMask ( REG_ADDR_SATHIS_HANDSHAKE, 0, 0x0F );
 454   1          if ( MAIN_WINDOW == u8Win ) // Main window
 455   1              msWriteByteMask ( REG_ADDR_SATHIS_HANDSHAKE, BIT2 | BIT1, BIT2 | BIT1 | BIT0 );
 456   1          else // Sub window
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 9   

 457   1              msWriteByteMask ( REG_ADDR_SATHIS_HANDSHAKE, BIT2 | BIT0, BIT2 | BIT1 | BIT0 );
 458   1      #endif
 459   1          msWriteByteMask ( REG_ADDR_INTENB, BIT3, BIT3 ); // Vsync int enable
 460   1      
 461   1      #if DSC_UsexvYccColorMatrix_EN
 462   1          msAdjustPCXvyccContrast ( MAIN_WINDOW, CurxvYgain );
 463   1      #else
                  //UserPrefContrast=128; // as range is 0~255, if range is 0~100, the value is 50
                  if(IsColorspaceRGB())
                  {
                          msWriteByteMask ( REG_ADDR_xvYCC_MAIN_COLOR_MATRIX_ENABLE, BIT1, BIT1 ); // 3x3 disable
                          mStar_AdjustContrast(UserPrefContrast);
                  }
                  else
                  {
                          msWriteByteMask ( REG_ADDR_xvYCC_MAIN_COLOR_MATRIX_ENABLE, BIT7, BIT7 ); // 3x3 disable
                          msAdjustVideoContrast(MAIN_WINDOW,UserPrefContrast);
                  }
              #endif
 476   1      
 477   1          msWriteByteMask ( REG_ADDR_XVYCC_CM_SAT_HIST, BIT0, BIT0 );
 478   1          msWriteByte ( SC0_00, ucBank );
 479   1      }
 480          //========================================================================================================
             -===========================================================:
 481          void msDSC_Off_Setting ( void )
 482          {
 483   1          BYTE xdata ucBank = msReadByte ( SC0_00 );
 484   1          REG_DSC_RUN_Flag = 0;
 485   1          msWriteByteMask ( REG_ADDR_INTENB, 0, BIT3 ); // Vsync int disable
 486   1          ISR_curDSCLoopCount = 0;
 487   1          ISR_preDSCLoopCount = 0;
 488   1      #if 1
 489   1      #if DSC_UsexvYccColorMatrix_EN
 490   1              CurxvYgain=0x400;
 491   1              msAdjustPCXvyccContrast ( MAIN_WINDOW, CurxvYgain );
 492   1      #else
                      //UserPrefContrast=128; // as range is 0~255, if range is 0~100, the value is 50
                      if(IsColorspaceRGB())
                      {
                              msWriteByteMask ( REG_ADDR_xvYCC_MAIN_COLOR_MATRIX_ENABLE, BIT1, BIT1 ); // 3x3 disable
                              mStar_AdjustContrast(UserPrefContrast);
                      }
                      else
                      {
                              msWriteByteMask ( REG_ADDR_xvYCC_MAIN_COLOR_MATRIX_ENABLE, BIT7, BIT7 ); // 3x3 disable
                              msAdjustVideoContrast(MAIN_WINDOW,UserPrefContrast);
                      }
              #endif
 505   1      #endif
 506   1      
 507   1          msWriteByte ( SC0_00, ucBank );
 508   1      }
 509          
 510          //========================================================================================================
             -===========================================================:
 511          //========================================================================================================
             -===========================================================:
 512          void msDSC_FadingArea_Setting (BYTE u8AresSelect, WORD u16Cr,WORD u16Cb, BYTE u8Range)
 513          {
 514   1          if (u8AresSelect==FadingArea_0)  //enable Fading area
 515   1          {
C51 COMPILER V9.60.0.0   MSDSC_SETTING                                                     12/25/2020 09:25:06 PAGE 10  

 516   2              msWriteByteMask ( SCF_C0, BIT0, BIT0 );
 517   2              msWriteByteMask ( SCF_C2, Fading_slop<<4|Fading_alpha, 0xFF );
 518   2              //Set CR max/min  for Area 0
 519   2              msWrite2ByteMask ( SCF_C4, (u16Cr-u8Range), 0x3FF );
 520   2              msWrite2ByteMask ( SCF_C6, (u16Cr+u8Range), 0x3FF );
 521   2              //Set CB max/min
 522   2              msWrite2ByteMask ( SCF_CC, (u16Cb-u8Range), 0x3FF );
 523   2              msWrite2ByteMask ( SCF_CE, (u16Cb+u8Range), 0x3FF );
 524   2              //printData("111 (u168Cr+u8Range) ==%x",(u168Cr+u8Range));
 525   2              //printData("222 (u168Cr-u8Range) ==%x",(u168Cr-u8Range));
 526   2              //printData("333 (u16Cb+u8Range) ==%x",(u16Cb+u8Range));
 527   2              //printData("444 (u16Cb-u8Range) ==%x",(u16Cb-u8Range));
 528   2          }
 529   1          else if (u8AresSelect==FadingArea_1)
 530   1          {
 531   2              msWriteByteMask ( SCF_C0, BIT1, BIT1 );
 532   2      
 533   2              msWriteByteMask ( SCF_D2, Fading_slop<<4|Fading_alpha, 0xFF );
 534   2              //Set CR max/min for Area 1
 535   2              msWrite2ByteMask ( SCF_D4, (u16Cr-u8Range), 0x3FF );
 536   2              msWrite2ByteMask ( SCF_D6, (u16Cr+u8Range), 0x3FF );
 537   2              //Set CB max/min
 538   2              msWrite2ByteMask ( SCF_DC, (u16Cb-u8Range), 0x3FF );
 539   2              msWrite2ByteMask ( SCF_DE, (u16Cb+u8Range), 0x3FF );
 540   2              //printData("555 (u168Cr+u8Range) ==%x",(u168Cr+u8Range));
 541   2              //printData("666 (u168Cr-u8Range) ==%x",(u168Cr-u8Range));
 542   2              //printData("777 (u16Cb+u8Range) ==%x",(u16Cb+u8Range));
 543   2              //printData("888 (u16Cb-u8Range) ==%x",(u16Cb-u8Range));
 544   2          }
 545   1      }
 546          
 547          //========================================================================================================
             -===========================================================:
 548          #else
              BYTE code msDSCSettingNullData[] = {0};
              void msDSCSettingDummy(void)
              {
                  BYTE xdata i = msDSCSettingNullData[0];
              }
              #endif // #if EnableDPS
 555          //========================================================================================================
             -===========================================================:


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1641    ----
   CONSTANT SIZE    =     54    ----
   XDATA SIZE       =     71      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      35
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
