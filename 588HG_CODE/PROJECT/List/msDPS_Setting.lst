C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MSDPS_SETTING
OBJECT MODULE PLACED IN .\Obj\msDPS_Setting.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\KERNEL\SCALER\msDPS_Setting.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\KERN
                    -EL\SYSTEM\INC;..\KERNEL\SCALER\INC;..\DRIVER\extDEVICE\INC;..\LIB\INC;..\PANEL\INC;..\UI\BOARD;..\UI\INC;..\UI\MODEL;..\
                    -DRIVER\INC;..\Customer) DEFINE(ModelName=TSUMXX9_DEMO) DEBUG OBJECTEXTEND PRINT(.\List\msDPS_Setting.lst) TABS(2) OBJECT
                    -(.\Obj\msDPS_Setting.obj)

line level    source

   1          
   2          #include <math.h>
   3          #include "types.h"
   4          #include "board.h"
   5          #include "panel.h"
   6          //#include "msreg.h"
   7          #include "ms_rwreg.h"
   8          #include "NVRAM.h"
   9          #include "Mode.h"
  10          #include "UserPrefDef.h"
  11          #include "global.h"
  12          #include "misc.h"
  13          #include "menudef.h"
  14          #include "menufunc.h"
  15          #include "debug.h"
  16          #include "userpref.h"
  17          #include "msOSD.h"
  18          #include "msDPS_Handler.h"
  19          #include "msDPS_Setting.h"
  20          #include "msDPS_RegSetting.h"
  21          #include "MsACE.h"
  22          #include "Adjust.h"
  23          #include "MsDlc.h"
  24          //#include "LedControl.h"
  25          //#include "debugmsg.h"
  26          #include "Common.h"
  27          
  28          //========================================================================================================
             -===========================================================:
  29          #if ENABLE_LED_CONTROLLER
              #include "LedControl.h"
              #endif
  32          //#include "msDPS.h"
  33          //========================================================================================================
             -===========================================================:
  34          #if ENABLE_DPS
  35          //========================================================================================================
             -===========================================================:
  36          //////////////////////////////////////////////////////////////////////////////////
  37          //////////////////////////////////////////////////////////////////////////////////
  38          ///// Y-mapping Table ////////////////////////////////////////////////////////////
  39          //////////////////////////////////////////////////////////////////////////////////
  40          //////////////////////////////////////////////////////////////////////////////////
  41          BYTE code DPS_Lumi_Table[17][11] =
  42          {
  43          /*
  44           {255,235,215,195,176,156,136,116, 96, 76, 57,},
  45           {208,192,176,160,144,127,111, 95, 79, 62, 46,},
  46           {173,159,145,132,119,106, 92, 79, 65, 51, 39,},
  47           {143,131,120,109, 98, 87, 76, 65, 54, 43, 32,},
  48           {118,108, 99, 90, 81, 72, 63, 54, 44, 35, 26,},
  49           { 96, 88, 81, 74, 66, 59, 51, 44, 36, 29, 22,},
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 2   

  50           { 76, 70, 64, 58, 52, 47, 41, 35, 29, 23, 17,},
  51           { 60, 55, 50, 46, 41, 36, 32, 27, 23, 18, 13,},
  52           { 45, 42, 38, 35, 31, 28, 24, 21, 17, 14, 10,},
  53           { 34, 31, 29, 26, 23, 21, 18, 16, 13, 10,  8,},
  54           { 25, 23, 21, 19, 17, 15, 13, 11,  9,  7,  6,},
  55           { 17, 15, 14, 13, 11, 10,  9,  8,  6,  5,  4,},
  56           { 10,  9,  9,  8,  7,  6,  5,  5,  4,  3,  2,},
  57           {  6,  5,  5,  4,  4,  3,  3,  3,  2,  2,  1,},
  58           {  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  1,},
  59           {  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,},
  60           {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,},
  61          */
  62           {255,229,205,179,155,129,104, 78, 53, 26,  1,},
  63           {223,201,179,157,135,113, 91, 68, 46, 23,  1,},
  64           {191,172,154,134,116, 97, 78, 58, 40, 20,  1,},
  65           {164,147,132,115, 99, 83, 67, 50, 34, 16,  1,},
  66           {138,124,111, 97, 83, 70, 56, 42, 28, 14,  1,},
  67           {113,102, 91, 79, 68, 57, 46, 34, 23, 12,  0,},
  68           { 93, 84, 75, 66, 57, 47, 38, 28, 19, 10,  0,},
  69           { 74, 67, 60, 52, 45, 37, 30, 23, 15,  8,  0,},
  70           { 58, 52, 47, 41, 35, 29, 24, 18, 12,  6,  0,},
  71           { 43, 39, 35, 30, 26, 22, 17, 13,  9,  4,  0,},
  72           { 31, 28, 25, 22, 19, 15, 12,  9,  6,  3,  0,},
  73           { 22, 20, 17, 15, 13, 11,  9,  7,  4,  2,  0,},
  74           { 14, 13, 11, 10,  9,  7,  6,  4,  3,  1,  0,},
  75           {  8,  7,  6,  5,  5,  4,  3,  2,  2,  1,  0,},
  76           {  3,  3,  2,  2,  2,  2,  1,  1,  1,  0,  0,},
  77           {  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,},
  78           {  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,},
  79          };
  80          
  81          //========================================================================================================
             -===========================================================:
  82          // XDATA variable Share with DLC (back up)
  83          //========================================================================================================
             -===========================================================:
  84          #if !SHARE_DLC_XDATA
  85          ///// ISR //////////////
  86          xdata WORD  ISR_LumaHistogram32H[32]; // >>6
  87          xdata WORD  ISR_HistogramTotalPix; // >>6
  88          xdata WORD  ISR_HistogramTotalLuma; // >>14
  89          xdata BYTE  ISR_HistogramMax;
  90          xdata BYTE  ISR_HistogramMin;
  91          #endif
  92          xdata WORD  REG_DPS_UserBrightContlGain;// 0~100: 0~100%
  93          //DPS_AggrPowerSaveMode_EN
  94          xdata WORD  REG_DPS_UserBrightLimitGain;
  95          xdata WORD  REG_DPS_AggressiveYgainGain;//  256   // 0~256: 0~100%
  96          xdata WORD  REG_DPS_AggressivePdutyGain;//  256   // 0~256: 0~100%
  97          xdata WORD  REG_DPS_AggressiveGainRange;//  240   // apply AggressiveGain when ImgYmax < Range
  98          
  99          xdata BYTE  REG_DPS_YOUT_ENABLE; // Color step from 0~255 to 16~235
 100          xdata BYTE  REG_DPS_BW_MODE_EN;
 101          xdata BYTE  REG_DPS_BW_MODE_Gain;
 102          xdata BOOL  REG_DPS_RUN_Flag =0;
 103          //#define ucWin DLCStatus
 104          
 105          ///// Global Variables ////////////////////////////////////////////////////////////
 106          ///// ISR /////////////////////////////////////////////////////////////////////////
 107          xdata BYTE  ISR_preLoopCount = 0;
 108          xdata BYTE  ISR_curLoopCount = 0;
 109          ///// DPS /////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 3   

 110          xdata BYTE  ucWin = 0;
 111          xdata BYTE  Flag_DPS_Latch_Busy = 0;
 112          xdata WORD  CurYgain = 0x400;
 113          xdata BYTE  CurBacklight = 0xFF;
 114          #define DPS_UserContrastControl_EN 0
 115          #if DPS_YminForWindowSave_EN
              xdata BYTE  REG_DPS_PowerLevel;  //0~FF
              #endif
 118          #if DPS_HistPseuMax_MOD1_EN
              xdata BYTE  REG_MouseCount;
              #endif
 121          #if ENABLE_DSC
 122          extern xdata BOOL  REG_DSC_RUN_Flag;
 123          #endif
 124          xdata WORD u16DPSContrast;
 125          #if 0
              void msAdjustPCContrastXvycc ( BYTE bScalerWin, WORD uwContrast )
              {
                  bScalerWin = bScalerWin;
                  #ifdef _ML_ENABLE_
                  msML_WaitReady();
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_BANK, 0x08 ); //alpha source  // sc8_82
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_COLOR_MATRIX_MAIN, uwContrast&0xFF ); //alpha source
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_COLOR_MATRIX_MAIN+1, uwContrast>>8 ); //alpha source
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_COLOR_MATRIX_MAIN+8, uwContrast&0xFF ); //alpha source
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_COLOR_MATRIX_MAIN+9, uwContrast>>8 ); //alpha source
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_COLOR_MATRIX_MAIN+16, uwContrast&0xFF ); //alpha source
                  msML_WriteByte(ML_MODE_NORMAL, REG_ADDR_SC_COLOR_MATRIX_MAIN+17, uwContrast>>8 ); //alpha source /
                  msML_Trigger(ML_TRIG_OUT_VDE_END);
                  #else
                      {
                  BYTE xdata ucBank;
                  WORD xdata uwAddr;
                  ucBank = msReadByte ( SC0_00 );
              #if CHIP_ID == CHIP_TSUMY || CHIP_ID == CHIP_TSUMB
                  scWriteByte(SC0_00, 0x03);
              #elif CHIP_ID == CHIP_TSUMV || CHIP_ID == CHIP_TSUMU || CHIP_ID == CHIP_TSUM2 || \
                CHIP_ID == CHIP_TSUMC || CHIP_ID == CHIP_TSUMD || CHIP_ID == CHIP_TSUMJ || CHIP_ID == CHIP_TSUM9
                  scWriteByte(SC0_00, 0x08);
              #endif
                  if ( bScalerWin == MAIN_WINDOW )
                  {
                      uwAddr = REG_ADDR_COLOR_MATRIX_Main;//SCE_05;   //--post3x3
                  }
                  else
                  {
                      uwAddr = REG_ADDR_COLOR_MATRIX_Sub;//SCE_25;
                  }
                  msWrite2Byte ( uwAddr, uwContrast ); //CM_11
                  msWrite2Byte ( uwAddr + 8, uwContrast ); //CM_22
                  msWrite2Byte ( uwAddr + 16, uwContrast ); //CM_33
                  msWriteByte ( SC0_00, ucBank );
                      }
                  #endif
              
              }
              #endif
 167          //========================================================================================================
             -===========================================================:
 168          //////////////////////////////////////////////////////////////////////////////////
 169          ///// Gen Output Interface ///////////////////////////////////////////////////////////
 170          ///// 1. Backlight adjust /////////////////////////////////////////////////////////////
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 4   

 171          ///// 2. Y-gain adjust ///////////////////////////////////////////////////////////////
 172          //////////////////////////////////////////////////////////////////////////////////
 173          void msDPS_AdjustBacklight ( BYTE BLValue ) // 0~255 <--> 0%~100%
 174          {
 175   1          BYTE xdata ucBank;
 176   1          ucBank = msReadByte ( SC0_00 );
 177   1      #if ENABLE_DSC
 178   1          if(REG_DSC_RUN_Flag || !REG_DPS_RUN_Flag)
 179   1              BLValue = 0xFF;
 180   1      #endif
 181   1          if (CurBacklight != BLValue)
 182   1          {
 183   2      #if ENABLE_LED_CONTROLLER
                      msLED_DimmingPWMAdjust ( BLValue );
              #else
 186   2              drvGPIO_SetBacklightDuty(BrightnessPWM,BLValue);
 187   2      #endif
 188   2          }
 189   1      
 190   1          //mStar_AdjustBrightness(BLValue);//Set_Real_Brightness(BLValue);
 191   1      
 192   1      #if DEBUG_PWM
              if (CurBacklight != BLValue)
                  printData("\r\n PWM %x", BLValue);
              #endif
 196   1          CurBacklight = BLValue;
 197   1          msWriteByte ( SC0_00, ucBank );
 198   1      }
 199          
 200          void msDPS_AdjustYgain ( WORD YgainValue ) // 2.10 format
 201          {
 202   1      BYTE xdata i;
 203   1      for ( i = 0; i < 32; i++ )
 204   1          uwArray[i] = ISR_LumaHistogram32H[i] ;
 205   1      #if DEBUG_HISTOGRAM
                  //BYTE xdata i;
                  printMsg("\r\n ===== Histogram Start ======");
                  for ( i = 0; i < 32; i++ )
                      printData("\r\n  %x", ISR_LumaHistogram32H[i]);
                  printMsg("\r\n ===== Histogram End ======");
              #endif
 212   1      #if DEBUG_HISTOGRAM_PAM
              printData("\r\n TotalPix %x", ISR_HistogramTotalPix);
              printData("\r\n TotalLuma %x", ISR_HistogramTotalLuma);
              printData("\r\n Max %x", ISR_HistogramMax);
              printData("\r\n Min %x", ISR_HistogramMin);
              #endif
 218   1      #if ENABLE_DSC
 219   1          if(REG_DSC_RUN_Flag || !REG_DPS_RUN_Flag)
 220   1              YgainValue = 1024;
 221   1      #endif
 222   1      #if DPS_UserContrastControl_EN
                  YgainValue = (DWORD)(YgainValue * UserPrefContrast * 256 /75) >> 8
              #endif
 225   1      
 226   1      if (CurYgain != YgainValue)
 227   1      {
 228   2          u16DPSContrast = (DWORD)YgainValue* UserPrefContrast / 1024;
 229   2          mStar_AdjustContrast( u16DPSContrast ); //msAdjustPCContrastXvycc ( ucWin, ( YgainValue & 0x0FFF ) ); 
             -// ratio: 0~3.99x
 230   2      }
 231   1      
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 5   

 232   1      #if DEBUG_Ygain
              if (CurYgain != YgainValue)
                  printData("\r\n Ygain %x", YgainValue);
              #endif
 236   1          CurYgain = YgainValue;
 237   1      }
 238          
 239          //========================================================================================================
             -===========================================================:
 240          //////////////////////////////////////////////////////////////////////////////////
 241          //////////////////////////////////////////////////////////////////////////////////
 242          ///// Function Declaration //////////////////////////////////////////////////////////////
 243          //////////////////////////////////////////////////////////////////////////////////
 244          //////////////////////////////////////////////////////////////////////////////////
 245          void msDPS_Interrupt ( void )
 246          {
 247   1          BYTE xdata ucTmp, ucBank;
 248   1          ucBank = scReadByte ( SC0_00 );
 249   1          scWriteByte(SC0_00, 0x00);
 250   1          scWriteByte ( REG_ADDR_INTENB, scReadByte ( REG_ADDR_INTENB ) & ( ~BIT3 ) ); //scRegs[0xCE] = scRegs[0
             -xCE]&(~BIT3);
 251   1          scWriteByte ( REG_ADDR_INTSTA, scReadByte ( REG_ADDR_INTSTA ) & ( ~BIT3 ) ); //scRegs[0xCC] = scRegs[0
             -xCC]&(~BIT3);
 252   1      #if CHIP_ID == CHIP_TSUMY ||CHIP_ID == CHIP_TSUMB
                  scWriteByte(SC0_00, 0x03);
              #elif CHIP_ID == CHIP_TSUMV || CHIP_ID == CHIP_TSUMU ||CHIP_ID == CHIP_TSUM2 || \
                CHIP_ID == CHIP_TSUMC || CHIP_ID==CHIP_TSUMK || CHIP_ID == CHIP_TSUMD || CHIP_ID == CHIP_TSUMJ || CHIP_ID
             - == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 256   1          scWriteByte(SC0_00, 0x07);
 257   1      #endif
 258   1      
 259   1          if ( ( scReadByte ( REG_ADDR_DLC_HANDSHAKE ) &BIT3 ) && ( !Flag_DPS_Latch_Busy )) //if( (scRegs[0xB8]&
             -BIT3) && (!Flag_DPS_Latch_Busy) )
 260   1          {
 261   2      #if CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                      scWriteByte(SC0_00, 0x03);
                      //Read Hist 32 Bins
                      scWriteByte ( REG_ADDR_HISTOGRAM_ADDR_PORT, 0 ); //scRegs[0xA9] = 0; // Hist address port
                      for ( ucTmp = 0; ucTmp < 32; ucTmp++ )
                      {
                          ISR_LumaHistogram32H[ucTmp] = ( ( ( WORD ) scReadByte ( REG_ADDR_HISTOGRAM_DATA_PORT ) ) << 8 
             -) + scReadByte ( REG_ADDR_HISTOGRAM_DATA_PORT ); //(((WORD)scRegs[0xAA]) << 8) + scRegs[0xAA];
                      }
              #elif CHIP_ID == CHIP_TSUMV || CHIP_ID == CHIP_TSUMU || CHIP_ID == CHIP_TSUM2 || \
                CHIP_ID == CHIP_TSUMC || CHIP_ID==CHIP_TSUMK || CHIP_ID == CHIP_TSUMD || CHIP_ID == CHIP_TSUMJ || CHIP_ID
             - == CHIP_TSUM9 ||CHIP_ID == CHIP_TSUMF
 271   2              //ucWin=SUB_WINDOW;
 272   2              scWriteByte(SC0_00, 0x08);
 273   2              for ( ucTmp = 0; ucTmp < 32; ucTmp++ )
 274   2              {
 275   3                  ISR_LumaHistogram32H[ucTmp] = scReadByte ( REG_ADDR_HISTOGRAM_DATA_32 + ( 2 * ucTmp ) + 1 );
 276   3                  ISR_LumaHistogram32H[ucTmp] <<= 8;
 277   3                  ISR_LumaHistogram32H[ucTmp] |= scReadByte ( REG_ADDR_HISTOGRAM_DATA_32 + ( 2 * ucTmp ) );
 278   3              }
 279   2      #endif
 280   2      #if CHIP_ID == CHIP_TSUMY || CHIP_ID == CHIP_TSUMB
                      scWriteByte(SC0_00, 0x03);
              #elif CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_ID
             -==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 283   2              scWriteByte(SC0_00, 0x07);
 284   2      #endif
 285   2              ISR_HistogramTotalPix = ((DWORD)PANEL_WIDTH * (DWORD)PANEL_HEIGHT) >> 6 ;//( ( ( WORD ) scReadByte
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 6   

             - ( REG_ADDR_HISTOGRAM_TOTAL_COUNT_H ) ) << 8 ) + scReadByte ( REG_ADDR_HISTOGRAM_TOTAL_COUNT_L ); //(((WORD)scRegs[0x35]
             -) << 8) + scRegs[0x34];
 286   2              ISR_HistogramTotalLuma = ( ( ( WORD ) scReadByte ( REG_ADDR_HISTOGRAM_TOTAL_SUM_H ) ) << 8 ) + scR
             -eadByte ( REG_ADDR_HISTOGRAM_TOTAL_SUM_L ); //(((WORD)scRegs[0x37]) << 8) + scRegs[0x36];
 287   2              #if CHIP_ID == CHIP_TSUMU
                      ISR_HistogramTotalLuma = ISR_HistogramTotalLuma *2;
                      #endif
 290   2              ISR_HistogramMax = scReadByte ( REG_ADDR_MAIN_MAX_VALUE ); //scRegs[0x3A];
 291   2              ISR_HistogramMin = scReadByte ( REG_ADDR_MAIN_MIN_VALUE ); //scRegs[0x39];
 292   2              //ISR_HistogramMax = ISR_HistogramMax * 250 / 255;
 293   2              //Request Hist
 294   2              scWriteByte ( REG_ADDR_DLC_HANDSHAKE, scReadByte ( REG_ADDR_DLC_HANDSHAKE ) & 0xF0 ); //scRegs[0xB
             -8] = scRegs[0xB8]&0xF0;
 295   2              if ( MAIN_WINDOW == ucWin )
 296   2              {
 297   3                  scWriteByte ( REG_ADDR_DLC_HANDSHAKE, scReadByte ( REG_ADDR_DLC_HANDSHAKE ) | BIT2 | BIT1 );  
             -  //scRegs[0xB8] = scRegs[0xB8]|BIT2|BIT1;
 298   3              }
 299   2              else
 300   2              {
 301   3                  scWriteByte ( REG_ADDR_DLC_HANDSHAKE, scReadByte ( REG_ADDR_DLC_HANDSHAKE ) | BIT2 | BIT0 );  
             -  //scRegs[0xB8] = scRegs[0xB8]|BIT2|BIT0;
 302   3              }
 303   2          }
 304   1          ISR_curLoopCount++;
 305   1          scWriteByte(SC0_00, 0x00);
 306   1          scWriteByte ( REG_ADDR_INTENB, scReadByte ( REG_ADDR_INTENB ) | BIT3 ); //scRegs[0xCE] = scRegs[0xCE]|
             -BIT3;
 307   1          scWriteByte ( SC0_00, ucBank );
 308   1      }
 309          
 310          //========================================================================================================
             -===========================================================:
 311          static void SetHistogramRange ( WORD wVStart, WORD wVEnd, WORD wHStart, WORD wHEnd, BYTE Enable)
 312          {
 313   1          BYTE xdata ucBank;
 314   1          ucBank = scReadByte ( SC0_00 );
 315   1      #if CHIP_ID == CHIP_TSUMY || CHIP_ID == CHIP_TSUMB
                  scWriteByte(SC0_00, 0x03);
              #elif CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2 ||CHIP_ID == CHIP_TSUMC||CHIP_I
             -D==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 318   1          scWriteByte(SC0_00, 0x07);
 319   1      #endif
 320   1          if ( REG_ADDR_HISTOGRAM_RANGE_M_HST !=0xFF)
 321   1          {
 322   2              // Set histogram range - H
 323   2              // Main Window
 324   2              scWriteByte ( REG_ADDR_HISTOGRAM_RANGE_M_HST, wHStart );
 325   2              scWriteByte ( REG_ADDR_HISTOGRAM_RANGE_M_HST + 1, ( scReadByte( REG_ADDR_HISTOGRAM_RANGE_M_HST + 1
             - ) & 0xF0 ) | ( wHStart >> 8 ) );
 326   2              scWriteByte ( REG_ADDR_HISTOGRAM_RANGE_M_HEN, wHEnd );
 327   2              scWriteByte ( REG_ADDR_HISTOGRAM_RANGE_M_HEN + 1, ( scReadByte( REG_ADDR_HISTOGRAM_RANGE_M_HEN + 1
             - ) & 0xF0 ) | ( wHEnd >> 8 ) );
 328   2          }
 329   1          // Set histogram range - V
 330   1          // Main Window
 331   1          scWriteByte ( REG_ADDR_HISTOGRAM_RANGE_M_VST, wVStart / 8 );
 332   1          #if CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_
             -ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 333   1          scWriteByte(SC0_00, 0x03);
 334   1          #endif
 335   1          scWriteByte ( REG_ADDR_HSLU_AP, ( scReadByte( REG_ADDR_HSLU_AP ) & 0xFE ) | ( ( wVStart / 8 ) >> 8 ) )
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 7   

             -;
 336   1          #if CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_
             -ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 337   1          scWriteByte(SC0_00, 0x07);
 338   1          #endif
 339   1          scWriteByte ( REG_ADDR_HISTOGRAM_RANGE_M_VEN, wVEnd / 8 );
 340   1          #if CHIP_ID == CHIP_TSUMV ||CHIP_ID == CHIP_TSUMU||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_
             -ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 341   1          scWriteByte(SC0_00, 0x03);
 342   1          #endif
 343   1          scWriteByte ( REG_ADDR_HSLU_AP, ( scReadByte( REG_ADDR_HSLU_AP ) & 0xFB ) | ( ( wVEnd / 8 ) >> 8 ) );
 344   1      
 345   1          // Enable range for Histogram
 346   1          if(Enable)
 347   1          {
 348   2              scWriteByte(SC0_00, 0x07);
 349   2              msWriteByteMask ( REG_ADDR_HISTOGRAM_RANGE_H_ENABLE, BIT6 | BIT7, BIT6 | BIT7 );
 350   2              #if CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                      scWriteByte(SC0_00, 0x03);
                      #endif
 353   2              msWriteByteMask ( REG_ADDR_HISTOGRAM_RANGE_V_ENABLE, BIT0 | BIT1, BIT0 | BIT1 );
 354   2          }
 355   1          else
 356   1          {
 357   2              scWriteByte(SC0_00, 0x07);
 358   2              msWriteByteMask ( REG_ADDR_HISTOGRAM_RANGE_H_ENABLE, 0, BIT6 | BIT7 );
 359   2              #if CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                      scWriteByte(SC0_00, 0x03);
                      #endif
 362   2              msWriteByteMask ( REG_ADDR_HISTOGRAM_RANGE_V_ENABLE, 0, BIT0 | BIT1 );
 363   2          }
 364   1          scWriteByte ( SC0_00, ucBank );
 365   1      }
 366          //========================================================================================================
             -===========================================================:
 367          //////////////////////////////////////////////////////////////////////////////////
 368          ///// DPS initail ////////////////////////////////////////////////////////////////
 369          //////////////////////////////////////////////////////////////////////////////////
 370          void msDPS_Init( void )
 371          {
 372   1          //Default brightness 100
 373   1          CurYgain = 0x400;
 374   1          CurBacklight = 0xFF;
 375   1      #if DPS_UserBrightControl_EN
 376   1          REG_DPS_UserBrightContlGain = UserPrefBrightness;//0~100//(WORD)USER_PREF_BRIGHTNESS * 256 / 100;//256
             -;   // 0~256: 0~100%
 377   1      #else
                  REG_DPS_UserBrightContlGain = 100;
              #endif
 380   1      
 381   1      #if DPS_AggrPowerSaveMode_EN
 382   1          #if DPS_UserBrightControl_EN
 383   1              REG_DPS_UserBrightLimitGain = 256;//USER_PREF_BRIGHTNESS * 256 / 100;//
 384   1          #else
                      REG_DPS_UserBrightLimitGain = 256;//"AggressivePdutyGain" it depend on "OSD bri", when OSD bri it 
             -sets lower than "AggressivePdutyGain", it need to follow "OSD bri".
                  #endif
 387   1          REG_DPS_AggressiveYgainGain = 256;// 0~256: 0~100%
 388   1          REG_DPS_AggressivePdutyGain = 210;//180;// 0~256: 0~100%
 389   1          REG_DPS_AggressiveGainRange = 255;// apply AggressiveGain when ImgYmax < Range
 390   1      #else
                  REG_DPS_UserBrightLimitGain = 256;
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 8   

                  REG_DPS_AggressiveYgainGain = 256;
                  REG_DPS_AggressivePdutyGain = 256;
                  REG_DPS_AggressiveGainRange = 128;
              #endif
 396   1          REG_DPS_BW_MODE_EN = 1;
 397   1      
 398   1          if(REG_DPS_BW_MODE_EN)
 399   1              REG_DPS_BW_MODE_Gain = 230;
 400   1      
 401   1          REG_DPS_YOUT_ENABLE = 0; //(Rosen)sc7_40[2]:reference Yout enable //(solar) sc0_5E[3]
 402   1      
 403   1          REG_DPS_RUN_Flag = 1;
 404   1      
 405   1      #if DPS_YminForWindowSave_EN
                  REG_DPS_PowerLevel = 20;  //0~5
              #endif
 408   1      #if DPS_HistPseuMax_MOD1_EN
                  REG_MouseCount = 1;
              #endif
 411   1      }
 412          //////////////////////////////////////////////////////////////////////////////////
 413          ///// DPS On <--> Off Settings ///////////////////////////////////////////////////
 414          //////////////////////////////////////////////////////////////////////////////////
 415          void msDPS_On_Setting( void )
 416          {
 417   1          BYTE xdata ucBank = msReadByte ( SC0_00 );
 418   1      
 419   1          //msDlcOnOff (_DISABLE);
 420   1          msDPS_Init();
 421   1          // Request HW to do histogram
 422   1          //msWriteByteMask(REG_ADDR_HISTOGRAM_RGB_ENABLE, BIT6, BIT6 );// [6]: Histogram RGB Mode Enable
 423   1          SetHistogramRange ( 0, ( PANEL_HEIGHT - 1 ), 0, ( PANEL_WIDTH - 1 ), 0 ); //SetHistogramRange(PanelHei
             -ght*1/8, PanelHeight*7/8, 0, (PanelWidth-1));
 424   1          //SetHistogramRange(PanelHeight*1/8, PanelHeight*7/8, PanelWidth*1/8, PanelWidth*7/8);
 425   1          #if CHIP_ID == CHIP_TSUMU
                  ucWin = ( msReadByte ( REG_ADDR_MWE_ENABLE ) &BIT0 ) ? SUB_WINDOW : MAIN_WINDOW;
                  #else
 428   1          ucWin = ( msReadByte ( REG_ADDR_MWE_ENABLE ) &BIT3 ) ? SUB_WINDOW : MAIN_WINDOW;
 429   1          #endif
 430   1      
 431   1          #if CHIP_ID == CHIP_TSUMU || CHIP_ID == CHIP_TSUMV || CHIP_ID == CHIP_TSUM2 || CHIP_ID == CHIP_TSUMC |
             -| CHIP_ID==CHIP_TSUMK ||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 432   1           msWriteByte ( SC0_00, 0x07 );
 433   1          #elif   CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                   msWriteByte ( SC0_00, 0x03 );
                  #endif
 436   1      
 437   1          msWriteByteMask ( REG_ADDR_HISTOGRAM_Acceler_ENABLE, BIT1, BIT1 ); //  histogram accelerate mode on
 438   1          #if CHIP_ID == CHIP_TSUMY ||CHIP_ID == CHIP_TSUMB
                  /// no need to change bank here,solar is sc_bank_3
                  #else
 441   1          msWriteByte ( SC0_00, 0x07 );
 442   1          #endif
 443   1          msWriteByteMask ( REG_ADDR_DLC_HANDSHAKE, 0, 0x0F );
 444   1          if ( MAIN_WINDOW == ucWin ) // Main window
 445   1          {
 446   2              msWriteByteMask ( REG_ADDR_DLC_HANDSHAKE, BIT2 | BIT1, BIT2 | BIT1 | BIT0 );
 447   2          }
 448   1          else // Sub window
 449   1          {
 450   2              msWriteByteMask ( REG_ADDR_DLC_HANDSHAKE, BIT2 | BIT0, BIT2 | BIT1 | BIT0 );
 451   2          }
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 9   

 452   1          msWriteByte ( SC0_00, 0x00 );
 453   1          msWriteByteMask ( REG_ADDR_INTENB, BIT3, BIT3 ); // Vsync int enable
 454   1          #if ENABLE_LED_CONTROLLER
                  msLED_DimmingPWMAdjust ( 0xFF );
                  #else
 457   1          mStar_AdjustBrightness(100);
 458   1          #endif
 459   1          u16DPSContrast = (DWORD)CurYgain* UserPrefContrast / 1024;
 460   1          mStar_AdjustContrast( u16DPSContrast );      //msAdjustPCContrastXvycc ( MAIN_WINDOW, CurYgain );
 461   1      
 462   1          // Enable Dither function for setting Ygain
 463   1          #if CHIP_ID == CHIP_TSUMU || CHIP_ID == CHIP_TSUMV|| CHIP_ID == CHIP_TSUM2|| CHIP_ID == CHIP_TSUMC || 
             -CHIP_ID==CHIP_TSUMK ||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 464   1          msWriteByte ( SC0_00, 0x09);
 465   1          msWriteBit( REG_ADDR_MAIN_ICC_DITHER_EN, 1, BIT2 );
 466   1          msWriteByte ( SC0_00, 0x07);
 467   1          #if CHIP_ID != CHIP_TSUMC && CHIP_ID!=CHIP_TSUMK &&CHIP_ID != CHIP_TSUMD&&CHIP_ID != CHIP_TSUMJ&&CHIP_
             -ID != CHIP_TSUM9 &&CHIP_ID != CHIP_TSUMF  //Dont have this dither setting
                  msWriteBit ( REG_ADDR_MAIN_NOISEMASK_DITHER_EN, 1, BIT6 );
                  #endif
 470   1          #if CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID 
             -== CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 471   1          msWriteBit ( REG_ADDR_HIST_BF_PK_EN, 0, BIT4 );
 472   1          #endif
 473   1      
 474   1          #elif  CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                  msWriteByte ( SC0_00, 0x06);
                  msWriteBit ( REG_ADDR_MAIN_ICC_DITHER_EN, 1, BIT3 );
                  msWriteByte ( SC0_00, 0x03);
                  msWriteBit ( REG_ADDR_MAIN_NOISEMASK_DITHER_EN, 1, BIT6 );
                  #endif
 480   1          UserPrefContrast=128; // as range is 0~255, if range is 0~100, the value is 50
 481   1      
 482   1          //if (USER_PREF_INPUT_COLOR_FORMAT==INPUT_COLOR_RGB)
 483   1          if(IsColorspaceRGB())
 484   1          {
 485   2              #if CHIP_ID == CHIP_TSUMV||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP
             -_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 486   2                  msWriteByteMask ( REG_ADDR_MAIN_COLOR_MATRIX_ENABLE, BIT7, BIT7 ); // 3x3 disable
 487   2              #elif CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                          msWriteByteMask ( REG_ADDR_MAIN_COLOR_MATRIX_ENABLE, BIT4, BIT4 ); // 3x3 disable
                      #endif
 490   2              mStar_AdjustContrast(UserPrefContrast);
 491   2          }
 492   1          else
 493   1          {
 494   2              #if CHIP_ID == CHIP_TSUMV||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP
             -_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 495   2                  msWriteByteMask ( REG_ADDR_MAIN_COLOR_MATRIX_ENABLE, BIT7, BIT7 ); // 3x3 disable
 496   2              #elif CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                          msWriteByteMask ( REG_ADDR_MAIN_COLOR_MATRIX_ENABLE, BIT4, BIT4 ); // 3x3 enable
                      #endif
 499   2      
 500   2              msAdjustVideoContrast(MAIN_WINDOW,UserPrefContrast);
 501   2          }
 502   1          ///////Reference Yout/////////
 503   1          if(REG_DPS_YOUT_ENABLE)
 504   1          {
 505   2              #if CHIP_ID == CHIP_TSUMV||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP
             -_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 506   2              msWriteByte ( SC0_00, 0x07);
 507   2              msWriteBit ( SC7_40, 1, BIT2 );
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 10  

 508   2              #endif
 509   2          }
 510   1          //////////////////////////////
 511   1          msWriteByte ( SC0_00, ucBank );
 512   1      }
 513          //========================================================================================================
             -===========================================================:
 514          void msDPS_Off_Setting ( void )
 515          {
 516   1          BYTE xdata ucBank = msReadByte ( SC0_00 );
 517   1          REG_DPS_RUN_Flag = 0;
 518   1          msWriteByteMask ( REG_ADDR_INTENB, 0, BIT3 ); // Vsync int disable
 519   1          //Default brightness 100
 520   1          #if ENABLE_LED_CONTROLLER
                  msLED_DimmingPWMAdjust ( 0xFF );
                  #endif
 523   1          mStar_AdjustBrightness(100);
 524   1          mStar_AdjustContrast( UserPrefContrast ); //msAdjustPCContrastXvycc ( MAIN_WINDOW, 0x400 );
 525   1      
 526   1          // Disable Dither function for setting Ygain
 527   1          #if CHIP_ID == CHIP_TSUMU || CHIP_ID == CHIP_TSUMV||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP
             -_ID==CHIP_TSUMK||CHIP_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 528   1          msWriteByte ( SC0_00, 0x09);
 529   1          msWriteBit( REG_ADDR_MAIN_ICC_DITHER_EN, 0, BIT2 );
 530   1          msWriteByte ( SC0_00, 0x07);
 531   1          #if CHIP_ID != CHIP_TSUMC && CHIP_ID!=CHIP_TSUMK && CHIP_ID !=CHIP_TSUMD  && CHIP_ID !=CHIP_TSUMJ && C
             -HIP_ID != CHIP_TSUM9&& CHIP_ID != CHIP_TSUMF//Dont have this dither setting
                  msWriteBit ( REG_ADDR_MAIN_NOISEMASK_DITHER_EN, 0, BIT6 );
                  #endif
 534   1          #elif  CHIP_ID == CHIP_TSUMB || CHIP_ID == CHIP_TSUMY
                  msWriteByte ( SC0_00, 0x06);
                  msWriteBit ( REG_ADDR_MAIN_ICC_DITHER_EN, 0, BIT3 );
                  msWriteByte ( SC0_00, 0x03);
                  msWriteBit ( REG_ADDR_MAIN_NOISEMASK_DITHER_EN, 0, BIT6 );
                  #endif
 540   1      
 541   1          ISR_curLoopCount = 0;
 542   1          ISR_preLoopCount = 0;
 543   1      
 544   1          msDPS_AdjustYgain ( 1024 );
 545   1          mStar_AdjustBrightness(UserPrefBrightness);//msDPS_AdjustBacklight (USER_PREF_BRIGHTNESS);
 546   1          ///////Reference Yout/////////
 547   1          if(REG_DPS_YOUT_ENABLE)
 548   1          {
 549   2              #if CHIP_ID == CHIP_TSUMV||CHIP_ID == CHIP_TSUM2||CHIP_ID == CHIP_TSUMC||CHIP_ID==CHIP_TSUMK||CHIP
             -_ID == CHIP_TSUMD||CHIP_ID == CHIP_TSUMJ||CHIP_ID == CHIP_TSUM9||CHIP_ID == CHIP_TSUMF
 550   2              msWriteByte ( SC0_00, 0x07);
 551   2              msWriteBit ( SC7_40, 0, BIT2 );
 552   2              #endif
 553   2          }
 554   1          //////////////////////////////
 555   1          msWriteByte ( SC0_00, ucBank );
 556   1      }
 557          //========================================================================================================
             -===========================================================:
 558          #else
              BYTE code msDPSSettingNullData[] = {0};
              
              void msDPSSettingDummy(void)
              {
                  BYTE xdata i = msDPSSettingNullData[0];
              }
C51 COMPILER V9.60.0.0   MSDPS_SETTING                                                     12/25/2020 09:25:04 PAGE 11  

              
              #endif // #if EnableDPS
 567          //========================================================================================================
             -===========================================================:
 568          
 569          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1282    ----
   CONSTANT SIZE    =    187    ----
   XDATA SIZE       =     93       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
